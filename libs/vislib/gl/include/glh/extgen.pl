#
# extgen.pl
#
# Replacement for nvidia extgen.cpp
#
# Copyright 2009, by S. Grottel
# Copyright 2009, by VISUS (Universitaet Stuttgart)
# All rights reserved. Alle Rechte vorbehalten
#
use strict;

#
# Usage: extgen.pl path/glh_genext.h path/glext.h
#                  [output]          [input]
#
# It is a weird order, but so it is compatible to the original program
#

my $glexth = 'GL/glext.h';
my $glhgenexth = 'glh_genext.h';

my @extensions;

if ($#ARGV >= 0) {
    $glhgenexth = $ARGV[0];
    if ($#ARGV >= 1) {
        $glexth = $ARGV[1];
    }
}

#
# startup summary
#
print "extgen.pl $glexth $glhgenexth\n";

#
# read input
#
my $indefinition;
my $extname;
my $inprototypes;
my $extcnt = 0;

open (INPUT, $glexth) || die "Cannot open input file \"$glexth\"\n";
while (<INPUT>) {
    if ($indefinition == 1) {
        if (/^#define\s+$extname\s+1/) {
            $inprototypes = 1;
            push @extensions, "$extname";
            push @extensions, "{";
        }
    }
    if ($inprototypes == 1) {
        # extern void APIENTRY glTexParameterIivEXT
        if (/^\s*(extern|GLAPI)\s+\S.*\S\s*APIENTRY\s+(\S+)\s*\(.*\)/) {
            push @extensions, "$2";
            $extcnt++;
        }
    }
    if (/^#endif/ && $inprototypes == 1) {
        $inprototypes = 0;
        $indefinition = 0;
        push @extensions, "}";
    }
    if (/^#ifndef\s+(GL_\S+)/) {
        $extname = $1;
        $indefinition = 1;
    }
}
close (INPUT);

print "$extcnt extensions found\n";

#
# function to generate the output
#
sub WriteFile {
    my @extensions = @{shift()};
    local *OUTPUT = shift;
    my $isHeader = shift;
    my $isFooter = shift;
    my $isCpp = shift;


    if ($isFooter) {
        print OUTPUT "#ifndef _WIN32\n";
    }
    if (!$isHeader) {
        #
        # changes are made in this block
        #
        print OUTPUT qq§#ifdef GLH_EXT_SINGLE_FILE

int glh_init_extension(const char* extension)
{
    if (NULL == extension) {
        return GL_FALSE;
#ifndef _WIN32
§;
        if ($isCpp) {
            #
            # text for the .hpp
            # smaller change for more consistency
            #
            print OUTPUT qq§    }
    if (0 == strcmp (extension, \"GL_VERSION_1_2\") || 0 == strcmp (extension, \"GL_VERSION_1_3\") || 0 == strcmp (extension, \"GL_VERSION_1_4\")) {
§;
        } else {
            print OUTPUT "    } else if (0 == strcmp (extension, \"GL_VERSION_1_2\") || 0 == strcmp (extension, \"GL_VERSION_1_3\") || 0 == strcmp (extension, \"GL_VERSION_1_4\")) {\n";
        }
        print OUTPUT qq§        return GL_TRUE;
#endif
§;
        #
        # changes are made in this block
        #

    } elsif (!$isFooter) {
        print OUTPUT qq§/* File generated by extgen.cpp -- do not modify */
#ifndef GLH_GENEXT_H
#define GLH_GENEXT_H

#ifdef __cplusplus
extern \"C\" {
#endif

#ifdef __gl_h_
    #error "gl.h must not be included before glh_genext.h due to broken linux opengl headers"
#endif

#ifdef __glext_h_
    #error "glext.h must not be included before glh_genext.h due to broken linux opengl headers"
#endif

/*
 * Define this token if you want "old-style" header file behaviour (extensions
 * defined in gl.h).  Otherwise, extensions will be included from glext.h.
 */
#define GL_GLEXT_LEGACY
#include <GL/gl.h>
#ifndef _WIN32
#undef GL_VERSION_1_1
#undef GL_VERSION_1_2
#undef GL_VERSION_1_3
#undef GL_VERSION_1_4
#endif
#include "GL/glext.h"
#if defined(WIN32)
#  include <GL/wglext.h>
#  define GLH_EXT_GET_PROC_ADDRESS(p)   wglGetProcAddress(p) 
#elif defined(UNIX)
#  include <string.h>
#  include <GL/glx.h>
#  include <GL/glxext.h>
#  define GLH_EXT_GET_PROC_ADDRESS(p)   glXGetProcAddressARB( (const GLubyte *) p) 
#endif

#ifdef GLH_EXT_SINGLE_FILE
#  ifdef _WIN32
#      define GLH_EXTERN _declspec(dllexport)
#  else
#      define GLH_EXTERN
#  endif
#  define GLH_INITIALIZER = 0
#else
#  if defined(_WIN32) && defined(GLH_EXT_IMPORT)
#      define GLH_EXTERN _declspec(dllimport) extern
#  else
#      define GLH_EXTERN extern
#  endif
#  define GLH_INITIALIZER
#endif

#define GLH__PREPROCESSOR_GYMNASTICS2(a,b) a##b
#define GLH__PREPROCESSOR_GYMNASTICS(a,b) GLH__PREPROCESSOR_GYMNASTICS2(a,b)

#ifndef _WIN32
#define GLH_EXT_PREFIX _
#endif
#ifndef GLH_EXT_PREFIX
# define GLH_EXT_NAME(a) a
#else
# define GLH_EXT_NAME(a) GLH__PREPROCESSOR_GYMNASTICS(GLH_EXT_PREFIX,a)
#endif

#ifndef _WIN32
# ifndef GLH_CORE_PREFIX
#  define GLH_CORE_PREFIX _
# endif
#endif

#ifndef GLH_CORE_PREFIX
# define GLH_CORE_NAME(a) a
#else
# define GLH_CORE_NAME(a) GLH__PREPROCESSOR_GYMNASTICS(GLH_CORE_PREFIX,a)
#endif

§;
    }

    my $inputPos = 0;
    my $token;
    my $opengl_core_names;
    my $name_macro;
    my $currentExtension;
    my $i;
    my @gl12extensions;
    my @gl13extensions;
    my @gl14extensions;
    my @gl15extensions;
    my @gl20extensions;
    my @gl21extensions;
    my $curFunc;
    my $funcUp;
    my $n;
    my $uprToken;
    my $tokenNamespace;

A:
    if ($#extensions < $inputPos) {
        goto FIN;
    } else {
        $token = $extensions[$inputPos];
        $inputPos++;
    }

    if (($token eq "GL_VERSION_1_2") ||
        ($token eq "GL_VERSION_1_3") || 
        ($token eq "GL_VERSION_1_4") || 
        ($token eq "GL_VERSION_1_5") || 
        ($token eq "GL_VERSION_2_0") || 
        ($token eq "GL_VERSION_2_1")) {

        $opengl_core_names = 1;
        $name_macro = "GLH_CORE_NAME";
    } else {
        $opengl_core_names = 0;
        $name_macro = "GLH_EXT_NAME";
    }
    # obsolete?
    #if (opengl_core_names>0) {
    #    print OUTPUT "#ifdef _WIN32\n";
    #}

    if ($token eq "GL_VERSION_1_2") {
        print OUTPUT "#if defined(GL_VERSION_1_2) || defined(GL_VERSION_1_3) || "
            . "defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || "
            . "defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)\n";
    } elsif ($token eq "GL_VERSION_1_3") {
        print OUTPUT "#if defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || "
            . "defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || "
            . "defined(GL_VERSION_2_1)\n";
    } elsif ($token eq "GL_VERSION_1_4") {
        print OUTPUT "#if defined(GL_VERSION_1_4) || "
            . "defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || "
            . "defined(GL_VERSION_2_1)\n";
    } elsif ($token eq "GL_VERSION_1_5") {
        print OUTPUT "#if defined(GL_VERSION_1_5) || "
            . "defined(GL_VERSION_2_0) || "
            . "defined(GL_VERSION_2_1)\n";
    } elsif ($token eq "GL_VERSION_2_0") {
        print OUTPUT "#if defined(GL_VERSION_2_0) || "
            . "defined(GL_VERSION_2_1)\n";
    } elsif ($token eq "GL_VERSION_2_1") {
        print OUTPUT "#if defined(GL_VERSION_2_1)\n";
    } else {
        print OUTPUT "#ifdef $token\n";
    }

    if (!$isHeader) {
        #
        # changes are made in this block
        #
        $currentExtension = $token;

        if ($isCpp) {
            print OUTPUT "    }\n";
            print OUTPUT "    if (0 == strcmp(extension, \"$token\")) {\n";
        } else {
            print OUTPUT "    } else if (0 == strcmp(extension, \"$token\")) {\n";
        }

        if (($currentExtension eq "GL_VERSION_1_3") || 
            ($currentExtension eq "GL_VERSION_1_4") ||
            ($currentExtension eq "GL_VERSION_1_5") ||
            ($currentExtension eq "GL_VERSION_2_0") ||
            ($currentExtension eq "GL_VERSION_2_1")) {

            for $curFunc (@gl12extensions)  {
                $funcUp = uc($curFunc);
                print OUTPUT "        $name_macro($curFunc) = (PFN${funcUp}PROC)GLH_EXT_GET_PROC_ADDRESS(\"$curFunc\");\n";
                print OUTPUT "        if (NULL == $name_macro($curFunc))\n";
                print OUTPUT "            return GL_FALSE;\n";
            }
        }

        if (($currentExtension eq "GL_VERSION_1_4") ||
            ($currentExtension eq "GL_VERSION_1_5") ||
            ($currentExtension eq "GL_VERSION_2_0") ||
            ($currentExtension eq "GL_VERSION_2_1")) {

            for $curFunc (@gl13extensions)  {
                $funcUp = uc($curFunc);
                print OUTPUT "        $name_macro($curFunc) = (PFN${funcUp}PROC)GLH_EXT_GET_PROC_ADDRESS(\"$curFunc\");\n";
                print OUTPUT "        if (NULL == $name_macro($curFunc))\n";
                print OUTPUT "            return GL_FALSE;\n";
            }
        }

        if (($currentExtension eq "GL_VERSION_1_5") ||
            ($currentExtension eq "GL_VERSION_2_0") ||
            ($currentExtension eq "GL_VERSION_2_1")) {

            for $curFunc (@gl14extensions)  {
                $funcUp = uc($curFunc);
                print OUTPUT "        $name_macro($curFunc) = (PFN${funcUp}PROC)GLH_EXT_GET_PROC_ADDRESS(\"$curFunc\");\n";
                print OUTPUT "        if (NULL == $name_macro($curFunc))\n";
                print OUTPUT "            return GL_FALSE;\n";
            }
        }

        if (($currentExtension eq "GL_VERSION_2_0") ||
            ($currentExtension eq "GL_VERSION_2_1")) {

            for $curFunc (@gl15extensions)  {
                $funcUp = uc($curFunc);
                print OUTPUT "        $name_macro($curFunc) = (PFN${funcUp}PROC)GLH_EXT_GET_PROC_ADDRESS(\"$curFunc\");\n";
                print OUTPUT "        if (NULL == $name_macro($curFunc))\n";
                print OUTPUT "            return GL_FALSE;\n";
            }
        }

        if ($currentExtension eq "GL_VERSION_2_1") {

            for $curFunc (@gl20extensions)  {
                $funcUp = uc($curFunc);
                print OUTPUT "        $name_macro($curFunc) = (PFN${funcUp}PROC)GLH_EXT_GET_PROC_ADDRESS(\"$curFunc\");\n";
                print OUTPUT "        if (NULL == $name_macro($curFunc))\n";
                print OUTPUT "            return GL_FALSE;\n";
            }
        }
        #
        # changes are made in this block
        #
    } else {
        if ($opengl_core_names) {
            print OUTPUT "    /* These routines are prefixed by the preprocessor constant\n";
            print OUTPUT "       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */\n";
        }
    }
    goto B;

B:
    if ($#extensions < $inputPos) {
        goto ERR;
    } else {
        $token = $extensions[$inputPos];
        $inputPos++;
    }
    if ($token eq "{") {
        goto C;
    }
    goto ERR;

C:
    if ($#extensions < $inputPos) {
        goto ERR;
    } else {
        $token = $extensions[$inputPos];
        $inputPos++;
    }

    if ($token eq "}") {
        #
        # changes are made in this block
        #

        if ($isCpp) {
            print OUTPUT "        return GL_TRUE;\n";
        }

        # obsolete?
        #if ($opengl_core_names) {
        #    print OUTPUT "#endif\n";
        #}

        print OUTPUT "#endif\n\n";
        goto A;
        #
        # changes are made in this block
        #
    }
    $uprToken = uc($token);
    if ($token =~ m/wgl/) {
        $tokenNamespace = "GLH_NAMESPACE_WGL";
    } elsif ($token =~ m/glx/) {
        $tokenNamespace = "GLH_NAMESPACE_GLX";
    } else {
        $tokenNamespace = "GLH_NAMESPACE_GL";
    }

    if ($tokenNamespace eq "GLH_NAMESPACE_WGL") {
        print OUTPUT "# ifdef _WIN32\n";
    } elsif ($tokenNamespace eq "GLH_NAMESPACE_GLX") {
        print OUTPUT "# ifdef GLX_VERSION_1_3\n";
    }
    if ($isHeader) {
        if (!$isFooter) {
            print OUTPUT "    GLH_EXTERN PFN${uprToken}PROC $name_macro($token) GLH_INITIALIZER;\n";
        } else {
            print OUTPUT "#define $token $name_macro($token)\n";
        }
    } else {
        if ($currentExtension eq "GL_VERSION_1_2") {
            push @gl12extensions, $token;
        }
        if ($currentExtension eq "GL_VERSION_1_3") {
            push @gl13extensions, $token;
        }
        if ($currentExtension eq "GL_VERSION_1_4") {
            push @gl14extensions, $token;
        }
        if ($currentExtension eq "GL_VERSION_1_5") {
            push @gl15extensions, $token;
        }
        if ($currentExtension eq "GL_VERSION_2_0") {
            push @gl20extensions, $token;
        }
        if ($currentExtension eq "GL_VERSION_2_1") {
            push @gl21extensions, $token;
        }

        print OUTPUT qq§        $name_macro($token) = (PFN${uprToken}PROC)GLH_EXT_GET_PROC_ADDRESS(\"$token\");
        if (NULL == $name_macro($token))
            return GL_FALSE;
§;
    }
    if ($tokenNamespace ne "GLH_NAMESPACE_GL") {
        print OUTPUT "# endif\n";
    }
    goto C;

FIN:
    if ($isHeader) {
        print OUTPUT "\n";
        if ($isFooter) {
            print OUTPUT "#endif\n";
        }
    } else {
        #
        # changes are made in this block
        #
        if ($isCpp) {
            print OUTPUT "    }\n";
            print OUTPUT "    return GL_FALSE; /* requested extension not found */\n";
        } else {
            #
            # comments added to output file
            #
            print OUTPUT qq§    } else {
        return GL_FALSE; /* requested extension not found */
    }
    return GL_TRUE; /* requested extension found and successfully loaded */
§;
        }

        print OUTPUT "}\n";
        print OUTPUT "#endif\n\n";

        if ($isCpp) {
            print OUTPUT "#else /* (defined(__cplusplus) && defined(_MSC_VER)) */\n";
            print OUTPUT "/* END EDITED BY VIS 22.02.2007 */\n\n";
        } else {
            print OUTPUT qq§/* BEGIN EDITED BY VIS 22.02.2007 */
#endif /* (defined(__cplusplus) && defined(_MSC_VER)) */
/* END EDITED BY VIS 22.02.2007 */

#undef GLH_EXT_SINGLE_FILE

#ifdef __cplusplus
}
#endif

#endif /* GLH_GENEXT_H */
§;
        }
        #
        # changes are made in this block
        #
    }
    return 0;

ERR:
    print "ERROR!\n";
    return 1;
}

#
# output control code
#
open (OUTPUT, ">$glhgenexth") || die "Cannot write output file \"$glhgenexth\"\n";

# create header
WriteFile(\@extensions, *OUTPUT, 1, 0, 0);

# create cpp body
print OUTPUT "/* BEGIN EDITED BY VIS 22.02.2007 */\n";
print OUTPUT "#if (defined(__cplusplus) && defined(_MSC_VER))\n";

WriteFile(\@extensions, *OUTPUT, 0, 0, 1);

# create c body
WriteFile(\@extensions, *OUTPUT, 0, 0, 0);

# create footer
WriteFile(\@extensions, *OUTPUT, 1, 1, 0);

close (OUTPUT);
exit 0;
