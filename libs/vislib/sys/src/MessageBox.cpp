/*
 * MessageBox.cpp
 *
 * Copyright (C) 2006 - 2008 by Universitaet Stuttgart (VIS). 
 * Alle Rechte vorbehalten.
 * Copyright (C) 2008 by Sebastian Grottel. Alle Rechte vorbehalten.
 */

#include "vislib/MessageBox.h"
#include "vislib/IllegalStateException.h"
#include "vislib/MissingImplementationException.h"
#ifndef _WIN32
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/keysym.h>
#include <X11/keysymdef.h>
#include <stdio.h>
#include <stdlib.h>
#endif /* !_WIN32 */

#ifdef _WIN32
#ifdef _MSC_VER
#pragma push_macro("MessageBox")
#undef MessageBox
#else /* _MSC_VER */
#ifdef MessageBox
#error MessageBox Macro defined!
#endif /* MessageBox */
#endif /* _MSC_VER */
#endif /* _WIN32 */


#ifndef _WIN32
namespace vislib {
namespace sys {
namespace MessageBoxLinuxUtils {

    /*
     * colours
     */
    typedef struct _colours_t {

        unsigned long black;
        unsigned long white;
        unsigned long whiteSmoke;
        unsigned long gainsboro;
        unsigned long silver;
        unsigned long darkGray;

    } Colours;


    /*
     * btnSize
     */
    static const unsigned int btnSize[2] = {100, 24};


    /*
     * border
     */
    static const unsigned int border = 16;


    /*
     * iconSize
     */
    static const unsigned int iconSize[2] = {32, 32};


    /*
     * errorImageData
     */
    static const unsigned char errorImageData[] = {
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\251\250\250\217\216\216|{{onnonn|{{\217\216\216\251\250\250\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\251\250\250\200\177\177\244\243\243\301\301\301"
"\332\332\332\356\354\354\374\374\374\374\374\374\356\354\354\332\332\332"
"\301\301\301\244\243\243\201\200\200\251\250\250\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\251\250\250\225\225\225\277\277\277\356\354\354"
"\352\315\315\333\245\245\332\224\225\322\204\205\315z{\312ll\301dd\305kk"
"\323\212\212\345\302\302\356\354\354\277\277\277\217\216\216\270\267\267"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\225\225\225\277\277\277\356\354\354\341\264\265\341\254\254"
"\347\267\270\331\214\215\312ll\312ll\311_`\301dd\305[\\\305[\\\271UU\302"
"UV\277]^\325\235\235\356\354\354\277\277\277\225\225\225\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\225\225\225\324\324\324\352"
"\315\315\341\254\254\352\315\315\332\224\225\312ll\312ll\311_`\312ll\311"
"_`\311_`\305[\\\305[\\\303WX\271UU\301MM\301MM\277]^\352\315\315\324\324"
"\324\225\225\225\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\225\225\225\341\341"
"\341\341\264\265\341\264\265\341\254\254\321tv\312ll\312ll\312ll\312ll\311"
"_`\312ll\311_`\305[\\\305[\\\310VW\302UV\271UU\301MM\265DE\265DE\333\255"
"\255\341\341\341\225\225\225\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\225\225\225\324\324\324\341\264"
"\265\341\254\254\332\224\225\312ll\312ll\312ll\312ll\312ll\312ll\312ll\311"
"_`\311_`\311]]\305[\\\303WX\302UV\301MM\301MM\277EF\277EF\265DE\333\255\255"
"\324\324\324\225\225\225\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\270\267\267\270\267\267\353\321\321\332\224\225\336\236\236"
"\312ll\312ll\312ll\312ll\312ll\312ll\312ll\312ll\311_`\311_`\311]]\311]]"
"\302UV\302UV\302UV\301MM\277EF\277EF\2759:\264;<\352\315\315\277\277\277"
"\251\250\250\377\377\377\377\377\377\377\377\377\377\377\377\217\216\216"
"\356\354\354\315z{\347\267\270\312ll\312ll\312ll\312ll\332\224\225\361\342"
"\342\353\321\321\312ll\311_`\311_`\311]]\311]]\302UV\311]]\350\305\305\352"
"\315\315\301dd\277EF\277EF\2759:\264;<\271UU\356\354\354\217\216\216\377"
"\377\377\377\377\377\377\377\377\251\250\250\277\277\277\333\245\245\332"
"\224\225\323|~\311_`\312ll\311_`\332\224\225\370\357\357\374\374\374\374"
"\374\374\353\321\321\277]^\311_`\311]]\311]]\302UV\350\305\305\374\374\374"
"\374\374\374\353\321\321\275_`\265DE\2759:\2759:\26534\325\235\235\277\277"
"\277\251\250\250\377\377\377\377\377\377\200\177\177\356\354\354\305kk\326"
"\223\224\311_`\311_`\311_`\312ll\362\334\335\374\374\374\374\374\374\374"
"\374\374\374\374\374\345\313\313\277]^\311]]\310VW\350\305\305\374\374\374"
"\374\374\374\374\374\374\374\374\374\334\273\274\254;;\2759:\2759:\26534"
"\256DD\356\354\354|{{\377\377\377\377\377\377\244\243\243\350\305\305\312"
"ll\315qr\301dd\311]]\311_`\311_`\350\305\305\374\374\374\374\374\374\374"
"\374\374\374\374\374\374\374\374\345\302\302\301dd\345\302\302\374\374\374"
"\374\374\374\374\374\374\374\374\374\374\374\374\306\227\230\24078\264;<"
"\27433\26534\255./\345\302\302\244\243\243\377\377\377\251\250\250\301\301"
"\301\313\216\217\312ll\305[\\\305[\\\305[\\\311]]\311]]\301dd\345\302\302"
"\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374\361\342\342"
"\374\374\374\374\374\374\374\374\374\374\374\374\366\363\364\267\214\214"
"\204''\237++\265/0\27433\27433\255./\305yy\301\301\301\251\250\250\217\216"
"\216\332\332\332\275_`\305[\\\305[\\\310VW\305[\\\305[\\\311]]\311]]\305"
"[\\\334\273\274\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374"
"\374\374\374\374\374\374\374\374\374\374\374\374\267\214\214\204''\232$$"
"\255./\276&(\265--\276&(\241%%\265DE\332\332\332\217\216\216|{{\356\354\354"
"\301MM\277]^\271UU\302UV\310VW\305[\\\310VW\302UV\275KL\2759:\320\262\262"
"\371\367\370\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374"
"\366\363\364\267\214\214\204''\232$$\265--\270--\276&(\275#$\275#$\255\35"
"\35\241%%\356\354\354|{{onn\374\374\374\301MM\271UU\301MM\271UU\302UV\302"
"UV\301MM\300CC\300==\300==\264;<\362\334\335\374\374\374\374\374\374\374"
"\374\374\374\374\374\374\374\374\335\314\315\204\35\35\232$$\265--\270--"
"\276&(\275#$\305#$\275#$\255\35\35\234\33\34\374\374\374onnonn\374\374\374"
"\277EF\301MM\301MM\301MM\301MM\300CC\2759:\300==\300==\300==\333\255\255"
"\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374"
"\366\363\364\312\236\237\241%%\276&(\301((\305#$\276&(\275#$\305#$\255\35"
"\35\234\27\30\374\374\374onn|{{\356\354\354\265DE\277EF\275KL\301MM\277E"
"F\26534\27433\300==\27433\341\254\254\374\374\374\374\374\374\371\367\370"
"\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374\374"
"\316\227\230\265--\301((\305#$\305#$\305#$\305#$\265\35\35\232$$\356\354"
"\354|{{\217\216\216\332\332\332\271UU\265DE\277EF\2759:\27433\27433\2743"
"3\300==\337\250\252\374\374\374\374\374\374\374\374\374\374\374\374\366\363"
"\364\332\305\306\374\374\374\374\374\374\374\374\374\374\374\374\374\374"
"\374\316\227\230\265--\305#$\305#$\305#$\305#$\265\35\35\254;;\332\332\332"
"\217\216\216\251\250\250\301\301\301\315z{\265DE\2759:\26534\272/0\26534"
"\272/0\333\255\255\374\374\374\374\374\374\374\374\374\374\374\374\366\363"
"\364\255z{\204''\306\227\230\374\374\374\374\374\374\374\374\374\374\374"
"\374\374\374\374\313\216\217\264#$\275#$\306\37\40\306\37\40\234\27\30\303"
"tt\301\301\301\251\250\250\377\377\377\244\243\243\345\302\302\264;<\265"
"34\255./\265--\265/0\270--\341\264\265\374\374\374\374\374\374\374\374\374"
"\366\363\364\255z{\204''\232$$\255./\316\227\230\374\374\374\374\374\374"
"\374\374\374\374\374\374\306\227\230\255\35\35\275#$\306\37\40\306\37\40"
"\230\23\24\345\302\302\244\243\243\377\377\377\377\377\377\200\177\177\356"
"\354\354\265DE\255./\265--\265--\265--\270--\277EF\334\273\274\374\374\374"
"\366\363\364\255z{\204\35\35\232$$\276&(\305#$\265--\316\224\224\374\374"
"\374\366\363\364\320\262\262\217++\255\35\35\275\35\35\305\40\37\306\37\40"
"\25155\356\354\354\200\177\177\377\377\377\377\377\377\251\250\250\277\277"
"\277\325\235\235\253#$\255./\265--\264#$\265--\265--\254;;\316\240\241\267"
"\201\201\204\35\35\232$$\265--\305#$\301((\305#$\270--\313\216\217\306\227"
"\230\217++\227\31\31\265\35\35\305\40\37\305\40\37\230\23\24\325\235\235"
"\301\301\301\251\250\250\377\377\377\377\377\377\377\377\377\217\216\216"
"\356\354\354\256DD\253#$\264#$\265--\265--\276&(\264#$\253#$\232$$\241%%"
"\264#$\301((\305#$\305#$\305#$\305#$\275#$\255\35\35\255\35\35\265\35\35"
"\305\40\37\305\40\37\306\37\40\265DE\356\354\354\225\225\225\377\377\377"
"\377\377\377\377\377\377\377\377\377\270\267\267\270\267\267\352\315\315"
"\244'(\253#$\264#$\264#$\275#$\276&(\275#$\264#$\276&(\275#$\311\40\40\305"
"#$\305#$\311\40\40\311\40\40\305#$\305#$\305\40\37\305\40\37\305\40\37\305"
"\40\37\241%%\352\315\315\277\277\277\251\250\250\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\225\225\225\324\324\324\333\255\255"
"\253#$\253#$\264#$\264#$\275#$\275#$\305#$\305#$\305#$\305#$\305#$\311\40"
"\40\311\40\40\311\40\40\311\40\40\311\40\40\311\36\36\305\40\37\305\40\37"
"\234\33\34\333\255\255\324\324\324\225\225\225\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\225\225\225\332"
"\332\332\333\255\255\241%%\253#$\264#$\275#$\275#$\305#$\305#$\305#$\305"
"#$\306\37\40\311\40\40\311\40\40\311\36\36\311\36\36\311\36\36\305\40\37"
"\306\37\40\232$$\333\255\255\341\341\341\225\225\225\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\225\225\225\324\324\324\352\315\315\256DD\234\33\34\255"
"\35\35\265\35\35\275#$\306\37\40\306\37\40\305\40\37\305\40\37\305\40\37"
"\311\36\36\305\40\37\306\37\40\265\35\35\234\27\30\271IJ\352\315\315\324"
"\324\324\225\225\225\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\225\225\225\270\267\267\356\354\354\325\235\235\25155\234\33\34"
"\234\33\34\255\35\35\255\35\35\255\35\35\255\35\35\255\35\35\265\35\35\234"
"\27\30\230\23\24\25155\325\235\235\356\354\354\277\277\277\225\225\225\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\270\267\267\217\216\216\277\277\277\356\354\354\345\302\302\303"
"tt\254;;\232$$\234\27\30\234\27\30\232$$\254;;\305yy\350\305\305\356\354"
"\354\277\277\277\217\216\216\270\267\267\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\251\250\250\200\177\177\244\243\243\301\301\301\332\332"
"\332\356\354\354\374\374\374\374\374\374\356\354\354\332\332\332\301\301"
"\301\244\243\243\200\177\177\251\250\250\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\251\250\250\217\216\216|{{onnonn|{{\217\216\216\251\250\250\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    };


    /*
     * warnImageData
     */
    static const unsigned char warnImageData[] = {
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\335\332\326\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\263\264\273\273\272\303"
"\303\304\323\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\257\260\264"
"\270\270\254\311\311\261\263\264\273\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\315\316\316\255\256\277\270\262m\307\270\36\274\274\275\263\264\273\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\256\256\263\256\256\254\326\306\21\344\333\6\275\255"
"L\271\274\313\315\316\316\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\273\272\303\264\264\302\266\252S\377\376\0\377\376"
"\0\322\274\13\275\270\240\264\264\302\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\263\264\273\266\266\246\334\312\7\377"
"\376\0\377\376\0\377\376\0\273\246>\303\304\323\273\272\303\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\261\262\265\303\304\323\275\255L\377\376"
"\0\377\376\0\377\376\0\377\376\0\322\274\13\312\303\234\271\274\313\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\271\274\313\301\277\227\334\312"
"\7\230\2253pnEpnE\177}E\340\323\6\304\2541\305\310\324\273\272\303\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\263\264\273\315\316\316\306\266=\374\365\1mmede{de{^^t\304"
"\267\37\346\306\12\305\266y\305\310\324\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\310\311\305\324\325\343"
"\307\304\214\340\323\6\374\365\1vu[ggqeej[\\d\307\270\36\377\360\16\300\243"
"+\347\344\343\273\272\303\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\273\272\303\310\311\305\327\302\35\377\376\0\377"
"\360\16tqQ[\\dVW[MNO\307\270\36\377\352\25\346\306\12\302\253d\351\353\364"
"\315\316\316\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\263\264\273"
"\351\353\364\303\267f\363\344\6\377\360\16\371\353\12pnEJKVEFK@@A\311\265"
"\32\377\343\23\367\323\13\303\242\33\332\322\276\305\310\324\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\303\304\323\311\311\261\336\305\25\377"
"\360\16\377\360\31\371\353\12lg:58D78<78<\322\267\21\373\333\13\365\327\21"
"\344\271\3\277\244I\351\353\364\302\302\303\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\263\264"
"\273\356\353\352\275\255L\377\360\16\377\353\31\377\353\31\371\353\12e^-"
")*845;FE=\322\267\21\377\331\6\365\314\5\365\314\5\321\241\0\310\266\214"
"\313\320\335\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\302\302\303\324\325\343\307\303\235\336\305\25\377"
"\353\31\376\344\31\376\344\31\365\327\21SJ\25\10\11\26\36\37$=;1\317\255"
"\5\373\313\0\363\310\5\363\310\5\355\273\0\263\210#\356\353\352\273\272\303"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\264\264\302\335\332\326\303\253E\377\345\6\367\323\13\365\323\1\365\323"
"\1\356\310\0E9\0\0\0\4\3\3\14=;1\321\241\0\362\273\0\362\273\0\354\261\0"
"\362\263\0\321\241\0\302\253w\313\320\335\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\274\274\275\330\331\345\272\253e\356\310\0\365"
"\323\1\356\310\0\356\310\0\356\310\0\363\310\5M=\0\0\0\4\27\31\"SO=\324\252"
"\2\362\273\0\354\261\0\354\261\0\354\261\0\353\253\1\273\217\37\313\305\273"
"\273\272\303\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\263\264\273"
"\270\270\254\321\256\15\365\314\5\356\310\0\356\310\0\363\310\5\363\310\5"
"\365\314\5]J\0\0\0\4\40$5ZUD\324\252\2\362\273\0\354\261\0\354\261\0\353"
"\253\1\353\253\1\332\230\3\265\226N\306\313\332\315\316\316\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\261\262\265\303\304\323\271\245P\363\310\5\356\310\0\363\310\5\355"
"\302\0\363\310\5\363\310\5\363\310\5\321\241\0\264\211\0\273\221\0\321\241"
"\0\345\253\0\353\253\1\353\253\1\353\253\1\353\253\1\351\246\0\353\253\1"
"\303\213\6\271\253\215\271\274\313\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\315\316\316\271\274\313\265"
"\260\220\317\255\5\356\310\0\363\310\5\363\310\5\363\310\5\355\273\0\355"
"\273\0\362\273\0\321\241\0\220p\0\200e\6\264\211\0\362\263\0\353\253\1\353"
"\253\1\351\246\0\351\246\0\346\243\0\346\243\0\332\230\3\261\2146\303\304"
"\323\273\272\303\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\256\256\263\263\264\273\273\245C\355\273\0\363\310\5\363"
"\310\5\355\273\0\355\273\0\355\273\0\362\273\0\362\273\0vZ\0\0\0\4\26\33"
"""3dZ8\333\242\0\353\253\1\353\253\1\351\246\0\346\243\0\346\243\0\351\246"
"\0\351\246\0\303\213\6\261\236u\271\274\313\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\274\274\275\266\273\305\266\252s\330\260\6\365"
"\314\5\365\314\5\363\310\5\363\310\5\363\310\5\355\273\0\362\273\0\362\273"
"\0UB\0\3\3\14""58D_]W\321\234\6\362\263\0\353\253\1\353\253\1\353\253\1\353"
"\253\1\353\253\1\353\253\1\346\243\0\263\210#\273\272\303\263\264\273\377"
"\377\377\377\377\377\377\377\377\377\377\377\256\256\263\261\257\240\303"
"\253E\376\331#\370\321(\370\321(\370\315&\370\315&\367\314$\370\315&\370"
"\315&\370\315&\314\244\40LC$UTJ\235\206>\354\270!\367\302(\362\276)\362\276"
")\362\276)\362\276)\362\276)\362\276)\367\302(\321\237\31\260\231d\264\264"
"\302\377\377\377\377\377\377\377\377\377\274\274\275\266\273\305\266\252"
"s\313\242&\313\242&\313\242&\313\236$\313\236$\313\236$\313\236$\313\236"
"$\313\236$\313\242&\313\236$\310\232&\273\217\37\310\232&\313\236$\310\232"
"&\313\236$\313\236$\313\236$\313\236$\313\236$\313\236$\313\236$\313\236"
"$\274\2267\272\264\260\263\264\273\377\377\377\377\377\377\261\262\265\315"
"\316\316\324\317\315\324\317\315\324\317\315\324\317\315\330\324\321\330"
"\324\321\337\332\330\343\337\335\352\347\346\356\353\352\356\353\352\356"
"\353\352\360\355\353\360\355\353\356\353\352\356\353\352\355\352\347\347"
"\344\343\347\344\343\337\332\330\330\324\321\330\324\321\330\324\321\324"
"\317\315\324\317\315\324\317\315\324\317\315\302\302\303\377\377\377\377"
"\377\377\274\274\275\235\235\240\233\234\236\227\227\232\227\227\232\230"
"\232\234\233\234\236\233\234\236\233\234\236\235\235\240\235\235\240\235"
"\241\242\241\242\244\241\242\244\241\242\244\241\242\244\241\242\244\241"
"\242\244\241\242\244\235\241\242\235\235\240\235\235\240\233\234\236\233"
"\234\236\233\234\236\233\234\236\230\232\234\233\234\236\233\234\236\241"
"\242\244\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377"
    };


    /*
     * infoImageData
     */
    static const unsigned char infoImageData[] = {
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\255\255\255\217\216\216|{{onnonn|{{\217\216\216\255\255\255\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\255\255\255\201\200\200\242\242\242\301\302\304"
"\333\334\334\353\353\355\373\373\373\373\373\373\353\353\355\333\334\334"
"\301\302\304\242\242\242|{{\255\255\255\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\255\255\255\225\225\225\301\302\304\353\353\355\333\334\334"
"\301\302\304\251\257\276\231\243\277\215\232\277\210\225\270\206\221\254"
"\225\230\240\250\252\260\325\327\330\353\353\355\301\302\304\217\216\216"
"\255\255\255\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\225\225\225\271\272\276\353\353\355\306\307\311"
"\271\300\323\232\262\356|\231\344s\222\342j\214\343m\215\337g\211\336Z\200"
"\335b\203\324a~\310h~\267\203\212\232\266\270\274\353\353\355\266\270\274"
"\225\225\225\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\225\225\225\326\325\320\333\334\334\271\300\323\232\262\356s\222\342j\214"
"\343c\212\351c\212\351[\204\350S|\341My\341S|\341Qy\334V{\327Wz\317Zy\304"
"^w\265\203\212\232\333\334\334\323\323\324\225\225\225\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\225\225\225\342\342\341\312\312\312\257\273\330|\231\344"
"g\211\336c\212\351[\204\350[\204\350[\204\350[\204\350\221\255\362\245\275"
"\365m\215\337My\341Ox\333Lt\330Lt\330Lo\303Tr\271fu\232\301\302\304\342\342"
"\341\225\225\225\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\225\225\225\326\325\320\312\312\312\242\262"
"\333s\222\342b\207\343[\204\350[\203\344[\204\350W\200\344S|\341\270\313"
"\371\373\373\373\373\373\373\364\372\377g\211\336Ck\321Jr\325Ck\321Rv\317"
"Gk\304Nm\270^p\232\301\302\304\323\323\324\225\225\225\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\265\265\266\271\272\276\333\334"
"\334\237\253\313m\215\337[\203\344[\203\344[\203\344W\200\344W\200\344S|"
"\341[\203\344\373\373\373\373\373\373\373\373\373\373\373\373\247\272\350"
":e\320Jr\325Bi\315Bi\315:a\305Gk\304Nm\270^l\221\333\334\334\266\270\274"
"\255\255\255\377\377\377\377\377\377\377\377\377\377\377\377\217\216\216"
"\353\353\355\234\242\256s\222\342Z\200\335W\200\344S|\341S|\341S|\341S|\341"
"Ox\333My\341\333\344\373\373\373\373\373\373\373\373\373\373}\225\322:e\320"
"Ck\321Bi\315?h\315?h\315:a\305>b\276Fc\254t|\222\353\353\355\217\216\216"
"\377\377\377\377\377\377\377\377\377\255\255\255\301\302\304\301\302\304"
"}\225\322Z\200\335Qy\334Qy\334Ox\333Ox\333Ox\333Ox\333Ox\333Lt\330Z\200\335"
"\315\325\352\340\344\355\222\242\3138^\302Ck\321Bi\315<c\312?h\3158^\302"
":a\3059^\277<^\267G_\237\264\265\270\301\302\304\246\250\255\377\377\377"
"\377\377\377\201\200\200\353\353\355\215\224\245b\203\324Rv\317Ox\333Lt\330"
"Lt\330Ox\333Ox\333Ox\333Lt\330Lt\330?h\315<c\3129^\2775\\\303Ck\321Bi\315"
"?h\315?h\3158^\3025\\\3035\\\3039^\2779^\277>]\254nt\204\353\353\355\201"
"\200\200\377\377\377\377\377\377\242\242\242\326\325\320s\207\274Rv\317L"
"t\330Lt\330Ox\333Ox\333Lt\330Lt\330Ck\321Lt\330Ck\321Jr\325Jr\325Jr\325J"
"r\325Bi\315,S\273,S\273*O\264*O\264%H\254*O\264!D\256*O\2642Q\246CY\225\326"
"\325\320\242\242\242\377\377\377\255\255\255\301\302\304\246\250\255Zy\304"
"Rv\317Ck\321Ck\321Ck\321Ck\321Ck\321Ck\321Ck\321Ck\321Ck\321\242\262\333"
"\373\373\373\353\351\347\303\314\346,C\203\13""0\244\32?\255\32?\255\32?"
"\255\32?\255\32?\255\32?\255$E\242\34A\2541M\231\223\226\237\301\302\304"
"\255\255\255\217\216\216\333\334\334\203\212\232Qr\303Bi\315Bi\315Ck\321"
"?h\315Ck\321?h\315Ck\321Gp\321:e\320,S\273\326\325\320\301\302\304\301\302"
"\304\342\342\3415I\210\13""0\244\32?\255\32?\255!D\256\32?\255\32?\255\32"
"?\255\34A\254\34A\2542I\223nt\204\333\334\334\217\216\216|{{\353\353\355"
"t|\222Lo\303Bi\315?h\315?h\315?h\315?h\315?h\315:e\320,S\273\34A\254!D\256"
"\326\325\320\301\302\304\271\272\276\341\340\3363H\205\13""0\244!D\256\32"
"?\255\32?\255\32?\255!D\256\32?\255\32?\255\34A\254)E\233NX\200\353\353\355"
"|{{onn\373\373\373iu\227Gk\304<c\312<c\312<c\312<c\312?h\3155\\\303$J\263"
"\34A\254\32?\255$J\263\312\312\312\274\272\267\265\265\266\341\340\3363H"
"\205\13""0\244\32?\255\32?\255\32?\255\32?\255\32?\255\32?\255\32?\255!D"
"\256$E\242@O{\373\373\373onnonn\373\373\373fs\225Ce\2748^\302<c\312<c\312"
"<c\312,S\273!D\256\34A\254\35B\262\34A\254$J\263\306\307\311\264\263\257"
"\264\263\257\340\337\3363H\205\13""0\244!D\256\32?\255\32?\255\32?\255\32"
"?\255\32?\255\32?\255\32?\255$E\242@O{\373\373\373onn|{{\353\353\355kr\212"
"Ce\2748^\3025\\\3035\\\303,S\273\35B\262\34A\254\34A\254\34A\254\34?\263"
"$J\263\306\307\311\255\255\255\255\255\255\341\340\3365I\210\13""0\244\34"
"?\263\34?\263\34?\263\34?\263\34?\263\32?\255\32?\255!D\256$E\242MX~\353"
"\353\355|{{\217\216\216\333\334\334}\203\217>`\2636[\2735\\\303,S\273!D\256"
"\34A\254\35B\262\32?\255!D\256\32?\255$J\263\306\307\311\255\255\255\265"
"\265\266\341\340\3363H\205\14""0\254\35B\262\34?\263\34?\263\34?\263\34?"
"\263\34?\263\34?\263!D\256.F\243el\201\333\334\334\217\216\216\255\255\255"
"\301\302\304\236\240\246B^\2526[\273,S\273!D\256!D\256!D\256!D\256!D\256"
"\32?\255\32?\255$D\275\306\307\311\264\263\257\265\265\266\353\351\3473H"
"\205\14""0\254$D\275\34?\263\34?\263\34?\263\34?\263\34?\263\34?\263!D\256"
")E\233\223\226\237\301\302\304\255\255\255\377\377\377\242\242\242\326\325"
"\320Mb\2335X\263$J\263!D\256!D\256\35B\262!D\256\35B\262\35B\262\34?\263"
"$J\263\312\312\312\274\272\267\301\302\304\342\342\3415I\210\14""0\254$D"
"\275$D\275$D\275$D\275$D\275$D\275\35B\262.F\2533F\212\326\325\320\242\242"
"\242\377\377\377\377\377\377\200\177\177\353\353\355kr\2122Q\246%H\254!D"
"\256\35B\262!D\256\35B\262\35B\262\35B\262\34?\263$D\275\326\325\320\301"
"\302\304\312\312\312\353\353\3553H\205\16""0\264$D\275$B\303$D\275$D\275"
"\33;\274$D\275!D\256.F\253_f\205\353\353\355\200\177\177\377\377\377\377"
"\377\377\255\255\255\271\272\276\264\265\2707P\222,I\242!D\256!D\256\35B"
"\262\35B\262!D\256\35B\262\35B\262$D\275\325\327\330\326\325\320\342\342"
"\341\362\361\3575I\210\16/\264$B\303$B\303$B\303$B\303$D\275$D\275,G\264"
"0D\223\264\265\270\271\272\276\255\255\255\377\377\377\377\377\377\377\377"
"\377\217\216\216\353\353\355nt\2042Q\246%H\254$J\263\35B\262\35B\262$D\275"
"\35B\262\34?\263$D\275\337\337\343\353\351\347\364\364\363\364\364\3635I"
"\210\16/\264$B\303$B\303$B\303$B\303$B\303$D\2754L\252kr\212\353\353\355"
"\225\225\225\377\377\377\377\377\377\377\377\377\377\377\377\265\265\266"
"\271\272\276\326\325\320NX\200,I\242%H\254\35B\262\35B\262!D\256$D\275\35"
"B\262$D\275\353\353\355\373\373\373\373\373\373\364\364\3635I\210\22""1\271"
"$B\303$C\310$B\303$B\303,G\2724L\261JU\207\333\334\334\271\272\276\255\255"
"\255\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\225\225"
"\225\326\325\320\301\302\304ES\203,I\242.F\253\35B\262\35B\262$D\275\33;"
"\274$D\275\271\300\323\364\364\363\364\364\363\307\314\335,C\203\22""1\271"
"$C\310$C\310$B\303+H\3034L\261AO\211\301\302\304\326\325\320\225\225\225"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\225\225\225\340\337\336\301\302\304NX\200,I\242.F\253!D\256"
"$D\275$D\275$D\2753F\212ES\203ES\203BN\203,G\264$B\303$C\310)E\303-H\274"
"4L\261JU\207\301\302\304\342\342\341\225\225\225\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\225\225\225\326\325\320\326\325\320nt\2042I\223.F\253.F\253"
"$D\275$D\275\33;\274\26""5\265\26""5\265\30""7\270$B\303+H\303-H\2744L\261"
"3G\234kr\212\333\334\334\326\325\320\225\225\225\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\225\225\225\271\272\276\353\353\355"
"\265\265\266_f\2052I\223.F\243.F\253,G\264,G\272,G\272-H\2744L\261.F\253"
"2I\223_f\205\266\270\274\353\353\355\271\272\276\225\225\225\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\265\265\266\217\216\216\271\272\276\353\353\355\326\325\320\223\226\237"
"el\201NX\200BN\203BN\203NX\200hn\206\225\230\240\326\325\320\353\353\355"
"\271\272\276\217\216\216\265\265\266\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\255\255\255\200\177\177\242\242\242\301\302\304\333\334\334"
"\353\353\355\373\373\373\373\373\373\353\353\355\333\334\334\301\302\304"
"\242\242\242\200\177\177\255\255\255\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\255\255\255\217\216\216|{{onnonn|{{\217\216\216\255\255\255\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    };


    /*
     * questImageData
     */
    static const unsigned char questImageData[] = {
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\250\252\260\217\216\216|{{onnonn|{{\217\216\216\250\252\260\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\250\252\260\177~~\240\242\246\304\303\306\335\335"
"\335\355\354\355\376\375\372\376\375\372\355\354\355\335\335\335\304\303"
"\306\240\242\246|{{\250\252\260\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\261\261\266\217\216\216\272\272\277\355\354\355\335\335\335\277\300"
"\301\256\263\303\232\247\312}\216\300}\216\300\211\231\305\242\252\304\262"
"\266\303\335\335\335\355\354\355\277\300\301\217\216\216\261\261\266\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\225\225\225\261\261\266\355\354\355\314\314\314\273\302\325\233"
"\255\337j\215\351Lv\345Am\340Am\340Cm\333;g\330;g\330<d\313Su\314\212\230"
"\277\304\303\306\355\354\355\272\272\277\225\225\225\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\217\216\216\325\324\324\341\341"
"\341\307\310\313\241\265\351n\221\354Lv\345Am\340Cm\333Cm\333>h\323>h\323"
">h\323;g\330<d\3136a\3154\\\3024\\\302\205\223\271\335\335\335\325\324\324"
"\217\216\216\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\217\216\216\341\341\341"
"\321\316\320\277\310\337\201\236\357S|\350Am\340Cm\333Cm\333Cm\333?j\331"
";g\330;g\330<d\313<d\313<d\313<d\313<d\3134\\\302*S\271Up\263\307\310\313"
"\341\341\341\217\216\216\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\225\225\225\325\324\324\321\316\320"
"\272\307\351p\222\355Fq\342Cm\333Cm\333Cm\333;g\330Kr\332^\202\332r\220\336"
"r\220\336^\202\332Dj\3134\\\3024\\\3024\\\3023Y\2674\\\302&P\264=Z\266\304"
"\303\306\325\324\324\225\225\225\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\250\252\260\272\272\277\341\341\341\267\300\332p\222"
"\355Cm\333Fq\342Cm\333?j\331V|\335\261\303\361\353\361\377\376\375\372\376"
"\375\372\376\375\372\376\375\372\353\361\377\243\265\343Dh\302*S\2717Y\256"
"3Y\2677Y\256&P\264A^\243\335\335\335\264\265\273\261\261\266\377\377\377"
"\377\377\377\377\377\377\377\377\377\225\225\225\355\354\355\256\261\272"
"z\232\355Cm\333Cm\333Kr\332>h\323>h\323\261\303\361\376\375\372\376\375\372"
"\376\375\372\376\375\372\376\375\372\376\375\372\376\375\372\376\375\372"
"\324\332\355Dh\302+S\2627Y\256(O\255(O\255$J\240du\241\355\354\355\225\225"
"\225\377\377\377\377\377\377\377\377\377\250\252\260\272\272\277\304\303"
"\306\222\247\341Sz\342?j\331Cm\333>h\323>h\3236a\315\266\304\354\376\375"
"\372\376\375\372\376\375\372\376\375\372\376\375\372\376\375\372\376\375"
"\372\376\375\372\376\375\372\252\270\331&P\264(O\255(O\255(O\255,P\244!E"
"\231\262\266\303\272\272\277\250\252\260\377\377\377\377\377\377\177~~\355"
"\354\355\235\243\264n\221\354>h\323Cm\333>h\323>h\323<d\3136a\315\266\304"
"\354\376\375\372\302\311\332\211\231\305w\215\302\231\252\321\362\363\370"
"\376\375\372\376\375\372\376\375\372\355\354\3557Y\256(O\255(O\2554S\242"
",P\244%I\234Rf\230\355\354\355\177~~\377\377\377\377\377\377\240\242\246"
"\325\324\324\204\230\316Kr\332>h\323>h\323<d\313<d\313<d\3134\\\302y\220"
"\317x\211\276+S\262+S\262*S\271\37G\253\204\230\316\376\375\372\376\375\372"
"\376\375\372\362\363\370Jf\250#J\254,P\244,P\244,P\244,P\244\35B\231\313"
"\315\322\240\242\246\377\377\377\250\252\260\304\303\306\255\257\264^\202"
"\332>h\323<d\313<d\313Dh\302<d\313<d\3139a\3053Y\267*S\2713Y\2673Y\2673Y"
"\267+S\262[x\277\355\354\355\355\354\355\363\363\365\355\354\3554S\242!E"
"\231\31?\232\35B\231\35B\231\35B\231\31=\222\177\212\243\304\303\306\250"
"\252\260\217\216\216\335\335\335\216\224\245Kr\332<d\313<d\313<d\3139a\305"
"9a\3054\\\3024\\\3024\\\3023Y\2673Y\267+S\262#J\254\24=\242r\206\270\325"
"\324\324\335\335\335\355\354\355\273\302\325\31=\222\31?\232\35B\231\35B"
"\231\35B\231!E\231\35@\223L\\\211\335\335\335\217\216\216|{{\355\354\355"
"t\201\242>h\323<d\313<d\313<d\3134\\\3024\\\3024\\\3027Y\2563Y\267+S\262"
"#J\254\26@\245\14""7\241Nh\253\264\265\273\300\277\303\325\324\324\355\354"
"\355]q\242\24:\224\35B\231\35B\231!E\231\35@\223\35B\231\35B\231*F\213\355"
"\354\355|{{onn\376\375\372du\241<d\3134\\\3024\\\3024\\\3024\\\3023Y\267"
"3Y\267+S\262#J\254\24=\242\24=\242\24=\242^t\254\261\261\266\264\265\273"
"\276\276\303\325\324\324\205\222\265\31=\222\35B\231\35B\231\35B\231\35B"
"\231*K\235\35@\223\35B\2315O\223\376\375\372onnonn\376\375\372br\2336`\307"
"4\\\3024\\\3024\\\3023Y\267+S\262\37G\253\26@\245\26@\245\24=\242\22;\233"
"^t\254\301\275\275\264\265\273\264\265\273\304\303\306du\241\31=\222*K\235"
"*K\235,P\244%I\234,P\244$J\240,P\244*K\235-J\222\376\375\372onn|{{\355\354"
"\355kv\2244\\\3023Y\2673Y\2676N\255+S\262\37G\253\24=\242\24=\242\22;\233"
"\22;\233\33D\243\262\266\303\304\303\306\304\303\306\276\276\303Rf\230\31"
"=\222,P\2444S\2424S\2424S\2424S\2424S\2424S\242,P\244,P\2445O\223\355\354"
"\355|{{\217\216\216\335\335\335\202\210\225*S\2713Y\267+S\262+S\262\26@\245"
"\24=\242\24=\242\22;\233\22;\233\16""8\235A^\243\313\315\322\313\315\322"
"\325\324\324z\207\250!E\2314S\2424S\242<Z\256<Z\2564S\2429U\2549U\2549U\254"
"7Y\2566N\255CU\224\335\335\335\217\216\216\250\252\260\304\303\306\240\242"
"\2467Y\256+S\262(O\255\26@\245\24=\242\22;\233\22;\233\22;\233\22;\233\17"
"""8\226Nh\253\325\324\324\325\324\324\325\324\324Zm\240,P\244<Z\256<Z\256"
"<Z\256<Z\256=Z\266=Z\266<Z\256<Z\2569U\2627Y\256t\201\242\300\277\303\250"
"\252\260\377\377\377\240\242\246\325\324\324Jb\233(O\255\26@\245\22;\233"
"\22;\233\22;\233\22;\233\24:\224\24:\224\31?\232*K\235]q\242]q\242du\241"
"=W\2359U\254<Z\256=Z\266<Z\256=Z\266=Z\266=Z\266=Z\266=Y\3049U\2627Y\256"
"\276\302\316\240\242\246\377\377\377\377\377\377\177~~\355\354\355s{\216"
"\26@\245\22;\233\22;\233\22;\233\22""7\217\15""5\222\24:\224\24:\224!E\231"
"!E\231!E\2314S\2427Y\256+Q\254<Z\256=Z\266=Z\266@\\\272=Y\304=Z\266@\\\272"
"=Y\304=Z\266=Y\304G[\236\355\354\355\177~~\377\377\377\377\377\377\250\252"
"\260\272\272\277\272\272\277*F\213\16""8\235\16""8\235\15""5\222\15""5\222"
"\22""7\217\24:\224\35@\223\35@\223A^\243\227\240\271\264\265\273\262\266"
"\303o\203\2779U\262=Y\304=Z\266@\\\272@\\\300@\\\300=Y\304=Y\304=Y\3042S"
"\273\233\243\271\304\303\306\250\252\260\377\377\377\377\377\377\377\377"
"\377\217\216\216\355\354\355nu\206\15""5\222\15""5\222\15""5\222\15""5\222"
"\15""5\222\24""9\216\35@\223%I\234\227\240\271\300\277\303\272\272\277\300"
"\277\303\306\311\321Lf\270=Y\304=Y\304=Y\304=Y\304=Y\304:U\304=Y\304:U\304"
"Jf\250\355\354\355\217\216\216\377\377\377\377\377\377\377\377\377\377\377"
"\377\261\261\266\270\267\267\335\335\335CU}\6""0\214\14""3\214\14""3\214"
"\22""7\217\31=\222!E\231*K\235\262\266\303\304\303\306\300\277\303\304\303"
"\306\330\326\326Up\263:U\304=Y\304:U\3048T\3116R\3128T\3116R\3126N\255\320"
"\322\330\272\272\277\261\261\266\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\225\225\225\325\324\324\277\300\3019N|\14""3\214\14"
"""3\214\24""9\216\35@\223!E\231%I\234x\211\276\325\324\324\320\322\330\335"
"\335\335\242\252\3049U\262:U\3048T\3116R\3126R\3126R\3126R\3125L\263\262"
"\266\303\325\324\324\225\225\225\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\217\216\216\341\341\341\277"
"\300\3019N|\14""3\214\24""9\216\35@\223*K\2354S\2424S\242`w\262\205\223\271"
"r\202\2669U\254:U\3048T\3116R\3126R\3126R\312-J\3215L\263\256\263\303\341"
"\341\341\217\216\216\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\217\216\216\325"
"\324\324\335\335\335]h\201#A\206\35@\223*K\2354S\2429U\2547Y\2566N\2552S"
"\273=Y\304:U\3046R\3126R\312-J\321+E\311O_\242\320\322\330\325\324\324\217"
"\216\216\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\225"
"\225\225\270\267\267\355\354\355\255\257\264Ta\2016O\2164S\242<Z\256=Z\266"
"@\\\272@\\\300=Y\3048T\3116R\3124K\275A^\243\242\247\272\355\354\355\270"
"\267\267\225\225\225\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\261\261\266\217\216\216\304\303\306\355"
"\354\355\313\315\322\210\216\235^i\210L\\\211CU\217CU\224DY\223Yf\226~\206"
"\244\306\311\321\355\354\355\304\303\306\217\216\216\261\261\266\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\250\252\260|{{\240\242\246\304\303"
"\306\335\335\335\355\354\355\376\375\372\376\375\372\355\354\355\335\335"
"\335\304\303\306\240\242\246|{{\250\252\260\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\250\252\260\217\216\216|{{onnonn|{{\217\216\216\250\252\260\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    };


    /*
     * allocateColour
     */
    unsigned long allocateColour(Display *display, Colormap colMap,
            unsigned char red, unsigned char green, unsigned char blue) {
        XColor col;
        col.red = static_cast<unsigned short>(red) * 256
            + static_cast<unsigned short>(red);
        col.green = static_cast<unsigned short>(green) * 256
            + static_cast<unsigned short>(green);
        col.blue = static_cast<unsigned short>(blue) * 256
            + static_cast<unsigned short>(blue);
        col.flags = DoRed | DoGreen | DoBlue;
        XAllocColor(display, colMap, &col);
        return col.pixel;
    }


    /*
     * drawButton
     */
    void drawButton(Display *display, int screen, Window window, GC gc,
            Colours& cols, XFontStruct *font, int x, int y, unsigned int w,
            unsigned int h, const char *text, bool focus, bool down) {

        ::XSetForeground(display, gc, focus ? cols.black : cols.darkGray);
        ::XDrawRectangle(display, window, gc, x, y, w, h);

        ::XSetForeground(display, gc, cols.gainsboro);
        ::XFillRectangle(display, window, gc, x + 3, y + 3, w - 5, h - 5);

        ::XSetForeground(display, gc, down ? cols.silver : cols.whiteSmoke);
        ::XDrawLine(display, window, gc, x + 1, y + 1, x + w - 2, y + 1);
        ::XDrawLine(display, window, gc, x + 1, y + 1, x + 1, y + h - 2);

        ::XSetForeground(display, gc, down ? cols.darkGray : cols.white);
        ::XDrawLine(display, window, gc, x + 2, y + 2, x + w - 4, y + 2);
        ::XDrawLine(display, window, gc, x + 2, y + 2, x + 2, y + h - 4);

        ::XSetForeground(display, gc, down ? cols.whiteSmoke : cols.silver);
        ::XDrawLine(display, window, gc, x + 1, y + h - 1, x + w - 1,
            y + h - 1);
        ::XDrawLine(display, window, gc, x + w - 1, y + 1, x + w - 1,
            y + h - 1);

        ::XSetForeground(display, gc, down ? cols.white : cols.darkGray);
        ::XDrawLine(display, window, gc, x + 2, y + h - 2, x + w - 2,
            y + h - 2);
        ::XDrawLine(display, window, gc, x + w - 2, y + 2, x + w - 2,
            y + h - 2);

        ::XSetForeground(display, gc, cols.black);
        int i1, i2, i3;
        XCharStruct tsize;
        ::XTextExtents(font, text, strlen(text), &i1, &i2, &i3, &tsize);
        ::XDrawString(display, window, gc, x + (w - tsize.width) / 2 
            + (down ? 1 : -1), y + 1 - tsize.descent + (h 
            + (tsize.ascent + tsize.descent)) / 2 + (down ? 1 : -1),
            text, strlen(text));

    }


    /*
     * calcBtnY
     */
    int calcBtnY(unsigned int winHeight) {
        return (winHeight - border - btnSize[1]);
    }


    /*
     * calcBtnX
     */
    int calcBtnX(unsigned int winWidth, unsigned int btn,
            unsigned int btnCnt) {
        return (winWidth - btnCnt * btnSize[0] - (btnCnt - 1) * border) / 2
            + (btn * (border + btnSize[0]));
    }


    /*
     * drawDialog
     */
    void drawDialog(Display *display, int screen, Window window, GC gc,
            Colours& colours, XFontStruct *font, const char *btn1,
            const char *btn2, const char *btn3, XImage *icon,
            const vislib::TString& msg, unsigned int& btnFocus,
            bool focusBtnDown) {

        const unsigned int btnCnt = ((btn2 == NULL) ? 1
            : ((btn3 == NULL) ? 2 : 3));
        int bx, by;

        ::XSetBackground(display, gc, colours.white);
        ::XSetForeground(display, gc, colours.black);
        ::XClearWindow(display, window);
        Window dummyWin;
        int x, y;
        unsigned int w, h, b, d;
        ::XGetGeometry(display, window, &dummyWin, &x, &y,
            &w, &h, &b, &d);

        by = calcBtnY(h);

        // draw icon
        if (icon != NULL) {
            ::XPutImage(display, window, gc, icon, 0, 0,
                2 * border, (by - border - iconSize[1]) / 2,
                iconSize[0], iconSize[1]);
        }

        // draw text
        int tx = (icon == NULL) ? 2 * border : 3 * border + iconSize[0];
        int tw = w - tx - 2 * border;

        // count lines !
        int i1, i2, i3, len, li;
        XCharStruct tsize;
        unsigned int lineCnt = 0;
        vislib::StringA text(msg);

        text.TrimSpaces();
        const char *txt = text.PeekBuffer();
        len = strlen(txt);

        ::XTextExtents(font, "A", 1, &i1, &i2, &i3, &tsize);

        while (len > 0) {
            if (::isspace(txt[0])) {
                txt++;
                len--;
                continue;
            }
            ::XTextExtents(font, txt, len, &i1, &i2, &i3, &tsize);
            if (tsize.width <= tw) {
                txt += len;
                len = strlen(txt);
                lineCnt++;
                continue;
            }
            for (li = len -1; li >= 0; li--) {
                if (::isspace(txt[li])) break;
            }
            for (; li >= 0; li--) { if (!::isspace(txt[li])) break; }
            if (li < 0) {
                // no further spaces found, so make char break;
                len--;
            } else {
                len = li + 1;
            }
        }

        int ty = ((by - border) - (tsize.ascent + tsize.descent)
            * lineCnt) / 2 + tsize.ascent;
        txt = text.PeekBuffer();
        len = strlen(txt);

        while (len > 0) {
            if (::isspace(txt[0])) {
                txt++;
                len--;
                continue;
            }
            ::XTextExtents(font, txt, len, &i1, &i2, &i3, &tsize);
            if (tsize.width <= tw) {

                ::XDrawString(display, window, gc, tx, ty, txt, len);
                ty += tsize.ascent + tsize.descent;

                txt += len;
                len = strlen(txt);
                lineCnt++;
                continue;
            }
            for (li = len -1; li >= 0; li--) { if (::isspace(txt[li])) break; }
            for (; li >= 0; li--) { if (!::isspace(txt[li])) break; }
            if (li < 0) {
                // no further spaces found, so make char break;
                len--;
            } else {
                len = li + 1;
            }
        }

        // draw buttons
        bx = calcBtnX(w, 0, btnCnt);
        ::XSetForeground(display, gc, colours.gainsboro);
        ::XFillRectangle(display, window, gc, 0, by - border,
            w, border * 2 + btnSize[1]);

        // btn 1
        drawButton(display, screen, window, gc, colours, font, bx, by,
            btnSize[0], btnSize[1], btn1, btnFocus == 0,
            focusBtnDown && (btnFocus == 0));

        // btn 2
        if (btn2 != NULL) {
            bx = calcBtnX(w, 1, btnCnt);
            drawButton(display, screen, window, gc, colours, font, bx, by,
                btnSize[0], btnSize[1], btn2, btnFocus == 1,
                focusBtnDown && (btnFocus == 1));
        }

        // btn 3
        if (btn3 != NULL) {
            bx = calcBtnX(w, 2, btnCnt);
            drawButton(display, screen, window, gc, colours, font, bx, by,
                btnSize[0], btnSize[1], btn3, btnFocus == 2,
                focusBtnDown && (btnFocus == 2));
        }
    }


} /* end namespace MessageBoxLinuxUtils */
} /* end namespace sys */
} /* end namespace vislib */
#endif /* !_WIN32 */


/*
 * vislib::sys::MessageBox::Show
 */
vislib::sys::MessageBox::ReturnValue 
vislib::sys::MessageBox::Show(const vislib::StringA& msg,
        const vislib::StringA& title, MsgButtons btns, MsgIcon icon,
        DefButton defBtn) {
    return MessageBox(msg, title, btns, icon, defBtn).ShowDialog();
}


/*
 * vislib::sys::MessageBox::Show
 */
vislib::sys::MessageBox::ReturnValue 
vislib::sys::MessageBox::Show(const vislib::StringW& msg,
        const vislib::StringW& title, MsgButtons btns, MsgIcon icon,
        DefButton defBtn) {
    return MessageBox(msg, title, btns, icon, defBtn).ShowDialog();
}


/*
 * vislib::sys::MessageBox::ShowDialog
 */
vislib::sys::MessageBox::ReturnValue 
vislib::sys::MessageBox::ShowDialog(const vislib::StringA& msg,
        const vislib::StringA& title, MsgButtons btns, MsgIcon icon,
        DefButton defBtn) {
    return MessageBox(msg, title, btns, icon, defBtn).ShowDialog();
}


/*
 * vislib::sys::MessageBox::ShowDialog
 */
vislib::sys::MessageBox::ReturnValue 
vislib::sys::MessageBox::ShowDialog(const vislib::StringW& msg,
        const vislib::StringW& title, MsgButtons btns, MsgIcon icon,
        DefButton defBtn) {
    return MessageBox(msg, title, btns, icon, defBtn).ShowDialog();
}


/*
 * vislib::sys::MessageBox::MessageBox
 */
vislib::sys::MessageBox::MessageBox(const vislib::StringA &msg,
        const vislib::StringA &title, MsgButtons btns, MsgIcon icon,
        DefButton defBtn) : btns(btns), defBtn(defBtn), icon(icon), msg(msg),
        retval(RET_NONE), title(title) {
    // intentionally empty
}


/*
 * vislib::sys::MessageBox::MessageBox
 */
vislib::sys::MessageBox::MessageBox(const vislib::StringW &msg,
        const vislib::StringW &title, MsgButtons btns, MsgIcon icon,
        DefButton defBtn) : btns(btns), defBtn(defBtn), icon(icon), msg(msg),
        retval(RET_NONE), title(title) {
    // intentionally empty
}


/*
 * vislib::sys::MessageBox::~MessageBox
 */
vislib::sys::MessageBox::~MessageBox(void) {
    // intentionally empty
}


/*
 * vislib::sys::MessageBox::ShowDialog
 */
vislib::sys::MessageBox::ReturnValue
vislib::sys::MessageBox::ShowDialog(void) {
#ifdef _WIN32
    UINT type = 0;
    int rv;

    switch (this->btns) {
        case BTNS_OK: type |= MB_OK; break;
        case BTNS_OKCANCEL: type |= MB_OKCANCEL; break;
        case BTNS_RETRYCANCEL: type |= MB_RETRYCANCEL; break;
        case BTNS_YESNO: type |= MB_YESNO; break;
        case BTNS_YESNOCANCEL: type |= MB_YESNOCANCEL; break;
        case BTNS_ABORTRETRYIGNORE: type |= MB_ABORTRETRYIGNORE; break;
        case BTNS_CANCELRETRYCONTINUE: type |= MB_CANCELTRYCONTINUE; break;
        default : throw IllegalStateException(
                  "MessageBox Buttons had no valid value.",
                  __FILE__, __LINE__);
    }

    switch (this->defBtn) {
        case DEFBTN_1: type |= MB_DEFBUTTON1; break;
        case DEFBTN_2: type |= MB_DEFBUTTON2; break;
        case DEFBTN_3: type |= MB_DEFBUTTON3; break;
        default : /* nothing to do */ break;
    }

    switch (this->icon) {
        case ICON_ERROR: type |= MB_ICONERROR; break;
        case ICON_WARNING: type |= MB_ICONWARNING; break;
        case ICON_INFO: type |= MB_ICONINFORMATION; break;
        case ICON_QUESTION: type |= MB_ICONQUESTION; break;
        case ICON_NONE: // fall through
        default : /* nothing to do */ break;
    }

    rv = ::MessageBoxW(NULL, this->msg.PeekBuffer(), this->title.PeekBuffer(),
        type);

    switch (rv) {
        case IDOK: this->retval = RET_OK; break;
        case IDCANCEL: this->retval = RET_CANCEL; break;
        case IDYES: this->retval = RET_YES; break;
        case IDNO: this->retval = RET_NO; break;
        case IDRETRY: this->retval = RET_RETRY; break;
        case IDABORT: this->retval = RET_ABORT; break;
        case IDCONTINUE: this->retval = RET_CONTINUE; break;
        case IDIGNORE: this->retval = RET_IGNORE; break;
        case IDTRYAGAIN: // fall through
        default: this->retval = RET_NONE; break;
    }

#else /* _WIN32 */

    Display *display;           // the display
    int screen;                 // the screen
    Window window = 0;          // the window
    GC gc = 0;                  // the graphics context
    Colormap colMap;            // the colour map
    MessageBoxLinuxUtils::Colours colours; // the colour map in usable form
    XFontStruct *font = 0;      // the font
    int answerBtn = -1;
    XImage *xIcon = NULL;

    vislib::StringA titleA(this->title);

    // construct button captions
    const char *btn1 = NULL, *btn2 = NULL, *btn3 = NULL;
    switch (this->btns) {
        case BTNS_OK: btn1 = "OK"; break;
        case BTNS_OKCANCEL: btn1 = "OK"; btn2 = "Cancel"; break;
        case BTNS_RETRYCANCEL: btn1 = "Retry"; btn2 = "Cancel"; break;
        case BTNS_YESNO: btn1 = "Yes"; btn2 = "No"; break;
        case BTNS_YESNOCANCEL: btn1 = "Yes"; btn2 = "No"; btn3 = "Cancel";
            break;
        case BTNS_ABORTRETRYIGNORE: btn1 = "Abort"; btn2 = "Retry";
            btn3 = "Ignore"; break;
        case BTNS_CANCELRETRYCONTINUE: btn1 = "Cancel"; btn2 = "Retry";
            btn3 = "Continue"; break;
        default: ASSERT(false); break;
    }

    // try connect to the x server and to create a window
    display = ::XOpenDisplay(NULL);
    if (display != NULL) {
        screen = DefaultScreen(display);

        XVisualInfo vinfo;
        if ((!::XMatchVisualInfo(display, 0, 32, TrueColor, &vinfo))
                && (!::XMatchVisualInfo(display, 0, 24, TrueColor, &vinfo))
                && (!::XMatchVisualInfo(display, 0, 16, TrueColor, &vinfo))) {
            // no truecolour visual
            try { ::XCloseDisplay(display); } catch(...) { }
            display = NULL;

        } else {
            colMap = ::XCreateColormap(display, RootWindow(display, screen),
                vinfo.visual, AllocNone);

            colours.white = MessageBoxLinuxUtils::allocateColour(
                display, colMap, 0xFF, 0xFF, 0xFF);
            colours.black = MessageBoxLinuxUtils::allocateColour(
                display, colMap, 0x00, 0x00, 0x00);
            colours.whiteSmoke = MessageBoxLinuxUtils::allocateColour(
                display, colMap, 0xF5, 0xF5, 0xF5);
            colours.gainsboro = MessageBoxLinuxUtils::allocateColour(
                display, colMap, 0xDC, 0xDC, 0xDC);
            colours.silver = MessageBoxLinuxUtils::allocateColour(
                display, colMap, 0xC0, 0xC0, 0xC0);
            colours.darkGray = MessageBoxLinuxUtils::allocateColour(
                display, colMap, 0xA9, 0xA9, 0xA9);

            window = ::XCreateSimpleWindow(display, DefaultRootWindow(display),
                100, 100, 100, 100, 4, colours.black, colours.white);
            ::XSetStandardProperties(display, window, titleA, titleA, None,
                NULL, 0, NULL);
            ::XSelectInput(display, window, ExposureMask | ButtonPressMask 
                | ButtonReleaseMask | Button1MotionMask | KeyPressMask);

            gc = ::XCreateGC(display, window, 0, 0);
            ::XSetBackground(display, gc, colours.white);
            ::XSetForeground(display, gc, colours.black);

            font = ::XQueryFont(display, ::XGContextFromGC(gc));

            // calculate required dialog size
            vislib::StringA text(this->msg);
            text.TrimSpaces();
            const unsigned int maxWinWidth = 600;
            unsigned int winWidth, winHeight;
            const unsigned int btnCnt = ((btn2 == NULL) ? 1
                : ((btn3 == NULL) ? 2 : 3));

            // minimum width is given by the buttons/border
            winWidth = btnCnt * MessageBoxLinuxUtils::btnSize[0]
                + (btnCnt + 1) * MessageBoxLinuxUtils::border;
            if (winWidth < maxWinWidth) { // if not we are in real trouble
                int len = ::XTextWidth(font, text, text.Length());
                len += 4 * MessageBoxLinuxUtils::border;
                if (this->icon != ICON_NONE) {
                    len += MessageBoxLinuxUtils::border
                        + MessageBoxLinuxUtils::iconSize[0];
                }
                if (static_cast<unsigned int>(len) > winWidth) {
                    winWidth = (static_cast<unsigned int>(len) > maxWinWidth)
                        ? maxWinWidth : static_cast<unsigned int>(len);
                }
            }

            // minimum height is given by the buttons/icon/border
            int i1, i2, i3, len, li, tw;
            XCharStruct tsize;
            unsigned int lineCnt = 0;
            tw = winWidth - 4 * MessageBoxLinuxUtils::border;
            if (this->icon != ICON_NONE) {
                tw -= (MessageBoxLinuxUtils::border
                    + MessageBoxLinuxUtils::iconSize[0]);
            }

            const char *txt = text.PeekBuffer();
            len = strlen(txt);

            ::XTextExtents(font, "A", 1, &i1, &i2, &i3, &tsize);

            while (len > 0) {
                if (::isspace(txt[0])) {
                    txt++;
                    len--;
                    continue;
                }
                ::XTextExtents(font, txt, len, &i1, &i2, &i3, &tsize);
                if (tsize.width <= tw) {
                    txt += len;
                    len = strlen(txt);
                    lineCnt++;
                    continue;
                }
                for (li = len -1; li >= 0; li--) {
                    if (::isspace(txt[li])) break;
                }
                for (; li >= 0; li--) { if (!::isspace(txt[li])) break; }
                if (li < 0) {
                    // no further spaces found, so make char break;
                    len--;
                } else {
                    len = li + 1;
                }
            }
            i1 = lineCnt * (tsize.ascent + tsize.descent);
            i2 = MessageBoxLinuxUtils::iconSize[1];

            winHeight = MessageBoxLinuxUtils::border * 4
                + MessageBoxLinuxUtils::btnSize[1]
                + ((i1 > i2) ? i1 : i2);

            XSizeHints hints;
            long otherStuff;
            ::XGetWMNormalHints(display, window, &hints, &otherStuff);
            hints.flags |= PSize | PMinSize | PMaxSize | PBaseSize;
#ifdef PWinGravity
            hints.flags |= PWinGravity;
            hints.win_gravity = CenterGravity;
#endif /* PWinGravity */
            hints.width = hints.min_width = hints.max_width
                = hints.base_width = winWidth;
            hints.height = hints.min_height = hints.max_height
                = hints.base_height = winHeight;
            hints.x = hints.y = 100;
            ::XSetWMNormalHints(display, window, &hints);

            XWMHints *wmHints = ::XGetWMHints(display, window);
            if (wmHints == NULL) {
                wmHints = ::XAllocWMHints();
            }
            wmHints->flags |= XUrgencyHint;
            ::XSetWMHints(display, window, wmHints);
            ::XFree(wmHints);

            ::XResizeWindow(display, window, winWidth, winHeight);

            ::XClearWindow(display, window);
            ::XMapRaised(display, window);

            XWindowChanges changes;
            changes.x = (XDisplayWidth(display, screen) - winWidth) / 2;
            changes.y = (XDisplayHeight(display, screen) - winHeight) / 2;
            ::XReconfigureWMWindow(display, window, screen,
                CWX | CWY, &changes);

            const unsigned char *iconDataSrc = NULL;
            switch (this->icon) {
                case ICON_ERROR:
                    iconDataSrc = MessageBoxLinuxUtils::errorImageData;
                    break;
                case ICON_WARNING:
                    iconDataSrc = MessageBoxLinuxUtils::warnImageData;
                    break;
                case ICON_INFO:
                    iconDataSrc = MessageBoxLinuxUtils::infoImageData;
                    break;
                case ICON_QUESTION:
                    iconDataSrc = MessageBoxLinuxUtils::questImageData;
                    break;
                case ICON_NONE: // fall through
                default :
                    xIcon = NULL;
                    break;
            }

            if (iconDataSrc != NULL) {
                int bpp = 4;
                switch (vinfo.depth) {
                    case 16: bpp = 2; break;
                    case 24: bpp = 4; break;
                    case 32: bpp = 4; break;
                    default: bpp = 4; break;
                }

                unsigned char *iconData = (unsigned char *)malloc(
                    MessageBoxLinuxUtils::iconSize[0]
                    * MessageBoxLinuxUtils::iconSize[1] * bpp);
                if (bpp == 2) {
                    //printf("16 bit depth\n");
                    unsigned short *tar 
                        = reinterpret_cast<unsigned short*>(iconData);
                    for (unsigned int y = 0; 
                            y < MessageBoxLinuxUtils::iconSize[1]; y++) {
                        for (unsigned int x = 0;
                                x < MessageBoxLinuxUtils::iconSize[0]; x++) {
                            // Linux 16 bit RGB seams to be rrrrrggggggbbbbb
                            *tar = static_cast<unsigned short>(
                                iconDataSrc[0] / 8) * 2048 
                                + static_cast<unsigned short>(iconDataSrc[1]
                                / 4) * 32 + static_cast<unsigned short>(
                                iconDataSrc[2] / 8);
                            tar++;
                            iconDataSrc += 3;
                        }
                    }
                } else {
                    //printf("32 bit depth\n");
                    unsigned char *tar = iconData;
                    for (unsigned int y = 0; 
                            y < MessageBoxLinuxUtils::iconSize[1]; y++) {
                        for (unsigned int x = 0;
                                x < MessageBoxLinuxUtils::iconSize[0]; x++) {
                            tar[0] = iconDataSrc[2];
                            tar[1] = iconDataSrc[1];
                            tar[2] = iconDataSrc[0];
                            tar[3] = 255;
                            tar += 4;
                            iconDataSrc += 3;
                        }
                    }
                }

                xIcon = ::XCreateImage(display, vinfo.visual, vinfo.depth,
                    ZPixmap, 0, (char*)iconData,
                    MessageBoxLinuxUtils::iconSize[0],
                    MessageBoxLinuxUtils::iconSize[1], 8,
                    MessageBoxLinuxUtils::iconSize[0] * bpp);
                // do not delete iconData here, because the ownership is taken
                // by X
            }

        }
    }

    if (display != NULL) {
        // x server available. Use a GUI dialog
        XEvent event;
        unsigned int btnFocus = 0;
        bool focusBtnClicked = false;
        bool mouseOnFocusBtn = false;
        const unsigned int btnCnt = ((btn2 == NULL) ? 1
            : ((btn3 == NULL) ? 2 : 3));

        Atom closeAtom = ::XInternAtom(display, "WM_DELETE_WINDOW", false);
        ::XSetWMProtocols(display, window, &closeAtom, 1);

        try {

            while(true) {
                ::XNextEvent(display, &event);

                if ((event.type == ClientMessage)
                        && (static_cast<Atom>(event.xclient.data.l[0])
                        == closeAtom)) {
                    // window has been closed
                    this->retval = RET_CANCEL;
                    break;
                } else if ((event.type == Expose)
                        && (event.xexpose.count == 0)) {
                    // the window was exposed - redraw it!
                    MessageBoxLinuxUtils::drawDialog(display, screen, window,
                        gc, colours, font, btn1, btn2, btn3, xIcon,
                        this->msg, btnFocus,
                        focusBtnClicked && mouseOnFocusBtn);

                } else if (event.type == KeyPress) {
                    KeySym key = XKeycodeToKeysym(display, event.xkey.keycode,
                        0);
                    if (key == XK_Escape) {
                        this->retval = RET_CANCEL;
                        break;
                    } else if ((key == XK_Return) || (key == XK_space)
                            || (key == XK_KP_Enter)) {
                        answerBtn = btnFocus + 1;
                        break;
                    } else if (key == XK_Right) {
                        if ((btnFocus < btnCnt - 1) && (!focusBtnClicked)) {
                            btnFocus++;
                            MessageBoxLinuxUtils::drawDialog(display, screen,
                                window, gc, colours, font, btn1, btn2, btn3,
                                xIcon, this->msg, btnFocus, false);
                        }
                    } else if (key == XK_Left) {
                        if ((btnFocus > 0) && (!focusBtnClicked)) {
                            btnFocus--;
                            MessageBoxLinuxUtils::drawDialog(display, screen,
                                window, gc, colours, font, btn1, btn2, btn3,
                                xIcon, this->msg, btnFocus, false);
                        }
                    }

                } else if ((event.type == ButtonPress)
                        && (event.xbutton.button == Button1)) {
                    // test for hit with a button
                    Window dummyWin;
                    int x, y;
                    unsigned int w, h, b, d;
                    ::XGetGeometry(display, window, &dummyWin, &x, &y,
                        &w, &h, &b, &d);
                    int by = MessageBoxLinuxUtils::calcBtnY(h);
                    int hitBtn = -1;
                    if ((event.xbutton.y >= by) 
                            && (event.xbutton.y 
                            < int(by + MessageBoxLinuxUtils::btnSize[1]))) {
                        for (unsigned int i = 0; i < btnCnt; i++) {
                            int bx = MessageBoxLinuxUtils::calcBtnX(w, i,
                                btnCnt);
                            if ((event.xbutton.x >= bx)
                                    && (event.xbutton.x < int(bx
                                    + MessageBoxLinuxUtils::btnSize[0]))) {
                                hitBtn = i;
                            }
                        }
                    }

                    if (hitBtn >= 0) {
                        btnFocus = hitBtn;
                        focusBtnClicked = true;
                        mouseOnFocusBtn = true;
                        MessageBoxLinuxUtils::drawDialog(display, screen,
                            window, gc, colours, font, btn1, btn2, btn3,
                            xIcon, this->msg, btnFocus,
                            focusBtnClicked && mouseOnFocusBtn);
                    }

                } else if ((event.type == ButtonRelease)
                        && (event.xbutton.button == Button1)) {
                    focusBtnClicked = false;
                    if (mouseOnFocusBtn) {
                        answerBtn = btnFocus + 1;
                        break;
                    }

                } else if (event.type == MotionNotify) {
                    // test for hit with a button
                    Window dummyWin;
                    int x, y;
                    unsigned int w, h, b, d;
                    ::XGetGeometry(display, window, &dummyWin, &x, &y,
                        &w, &h, &b, &d);
                    int by = MessageBoxLinuxUtils::calcBtnY(h);
                    int hitBtn = -1;
                    if ((event.xbutton.y >= by) 
                            && (event.xbutton.y 
                            < int(by + MessageBoxLinuxUtils::btnSize[1]))) {
                        for (unsigned int i = 0; i < btnCnt; i++) {
                            int bx = MessageBoxLinuxUtils::calcBtnX(w, i,
                                btnCnt);
                            if ((event.xbutton.x >= bx)
                                    && (event.xbutton.x < int(bx
                                    + MessageBoxLinuxUtils::btnSize[0]))) {
                                hitBtn = i;
                            }
                        }
                    }

                    if ((hitBtn == int(btnFocus)) != mouseOnFocusBtn) {
                        mouseOnFocusBtn = (hitBtn == int(btnFocus));
                        MessageBoxLinuxUtils::drawDialog(display, screen,
                            window, gc, colours, font, btn1, btn2, btn3,
                            xIcon, this->msg, btnFocus,
                            focusBtnClicked && mouseOnFocusBtn);
                    }

                //} else {
                //    printf("Unhandled event %d\n", event.type);
                }

            }

        } catch(...) {
            this->retval = RET_CANCEL;
        }

        try { if (xIcon != NULL) XDestroyImage(xIcon); } catch(...) { }
        try { ::XFreeFontInfo(NULL, font, 1); } catch(...) { }
        try { ::XFreeGC(display, gc); } catch(...) { }
        try { ::XDestroyWindow(display, window); } catch(...) { }
        try { ::XCloseDisplay(display); } catch(...) { }
        display = NULL;

    } else {
        // x server unavailable. Use a console dialog (stdout/stdin)
        FILE *out = (this->icon == ICON_ERROR) ? stderr : stdout;

        // print title and message
        if (!titleA.IsEmpty()) {
            fprintf(out, "\n\t%s\n\n", titleA.PeekBuffer());
        }
        switch (this->icon) {
            case ICON_ERROR: fprintf(out, "Error: "); break;
            case ICON_WARNING: fprintf(out, "Warning: "); break;
            case ICON_INFO: // fall through
            case ICON_QUESTION: // fall through
            case ICON_NONE: // fall through
            default : /* nothing to do */ break;
        }
        fprintf(out, "%s\n\n", vislib::StringA(this->msg).PeekBuffer());

        // simple ok message boxes are handled separatly
        if (this->btns == BTNS_OK) {
            fprintf(out, "Hit \"Return\" to continue\n");
            char i;
            fscanf(stdin, "%c", &i);
            return this->retval = RET_OK;
        }

        // message loop
        char answer[1024];
        bool b1, b2, b3;
        int pos;
        int l1, l2, l3, l;
        l1 = strlen(btn1);
        l2 = strlen(btn2);
        l3 = (btn3 == NULL) ? 0 : strlen(btn3);

        while (answerBtn < 0) {
            fprintf(out, (btn3 != NULL) 
                ? "Enter your answer (\"%s\"%s, \"%s\"%s, or \"%s\"%s): "
                : "Enter your answer (\"%s\"%s or \"%s\"%s): ",
                btn1, (this->defBtn == DEFBTN_1) ? "[Default]" : "",
                btn2, (this->defBtn == DEFBTN_2) ? "[Default]" : "",
                btn3, (this->defBtn == DEFBTN_3) ? "[Default]" : "");

            fscanf(stdin, "%s", answer);

            l = strlen(answer);

            b1 = b2 = true;
            b3 = (btn3 != NULL);
            for (pos = 0; pos < l; pos++) {
                if (pos >= l1) b1 = false;
                if (pos >= l2) b2 = false;
                if (pos >= l3) b3 = false;

                if (b1 && (tolower(btn1[pos]) != tolower(answer[pos]))) {
                    b1 = false;
                }
                if (b2 && (tolower(btn2[pos]) != tolower(answer[pos]))) {
                    b2 = false;
                }
                if (b3 && (tolower(btn3[pos]) != tolower(answer[pos]))) {
                    b3 = false;
                }
            }

            if (b1 && !b2 && !b3) { answerBtn = 1; }
            else if (!b1 && b2 && !b3) { answerBtn = 2; }
            else if (!b1 && !b2 && b3) { answerBtn = 3; }
            else if (!b1 && !b2 && !b3) {
                fprintf(out, "Invalid answer!\n");
            } else if (b1 && b2 && (b3 || (btn3 == NULL))) {
                switch (this->defBtn) {
                    case DEFBTN_1:
                        fprintf(out, "Answer \"%s\" chosen by default.\n",
                            btn1);
                        answerBtn = 1;
                        break;
                    case DEFBTN_2:
                        fprintf(out, "Answer \"%s\" chosen by default.\n",
                            btn2);
                        answerBtn = 2;
                        break;
                    case DEFBTN_3:
                        if (btn3 == NULL) {
                            fprintf(out, "Invalid answer!\n");
                        } else {
                            fprintf(out, "Answer \"%s\" chosen by default.\n",
                                btn3);
                            answerBtn = 3;
                        }
                        break;
                }
            } else {
                fprintf(out, "Ambiguous answer!\n");
            }

        }
    }

    if (answerBtn > 0) {
        // set return value
        switch (this->btns) {
            case BTNS_OKCANCEL: 
                this->retval = (answerBtn == 1) ? RET_OK : RET_CANCEL;
                break;
            case BTNS_RETRYCANCEL: 
                this->retval = (answerBtn == 1) ? RET_RETRY : RET_CANCEL;
                break;
            case BTNS_YESNO: 
                this->retval = (answerBtn == 1) ? RET_YES : RET_NO;
                break;
            case BTNS_YESNOCANCEL: 
                switch (answerBtn) {
                    case 1: this->retval = RET_YES; break;
                    case 2: this->retval = RET_NO; break;
                    case 3: this->retval = RET_CANCEL; break;
                }
                break;
            case BTNS_ABORTRETRYIGNORE:
                switch (answerBtn) {
                    case 1: this->retval = RET_ABORT; break;
                    case 2: this->retval = RET_RETRY; break;
                    case 3: this->retval = RET_IGNORE; break;
                }
                break;
            case BTNS_CANCELRETRYCONTINUE:
                switch (answerBtn) {
                    case 1: this->retval = RET_CANCEL; break;
                    case 2: this->retval = RET_RETRY; break;
                    case 3: this->retval = RET_CONTINUE; break;
                }
                break;
            case BTNS_OK: this->retval = RET_OK; break;
            default: ASSERT(false); break;
        }

    }

#endif /* _WIN32 */

    return this->retval;
}


#ifdef _WIN32
#ifdef _MSC_VER
#pragma pop_macro("MessageBox")
#endif /* _MSC_VER */
#endif /* _WIN32 */
