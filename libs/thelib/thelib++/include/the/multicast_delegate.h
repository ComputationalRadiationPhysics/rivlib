/*
 * the/multicast_delegate.h
 *
 * Copyright (c) 2013, TheLib Team (http://www.thelib.org/license)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of TheLib, TheLib Team, nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THELIB TEAM AS IS AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THELIB TEAM BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef THE_MULTICAST_DELEGATE_H_INCLUDED
#define THE_MULTICAST_DELEGATE_H_INCLUDED
#if (defined(_MSC_VER) && (_MSC_VER > 1000))
#pragma once
#endif /* (defined(_MSC_VER) && (_MSC_VER > 1000)) */
#if defined(_WIN32) && defined(_MANAGED)
#pragma managed(push, off)
#endif /* defined(_WIN32) && defined(_MANAGED) */

#include "the/assert.h"
#include "the/collections/array.h"
#include "the/delegate.h"
#include "the/invalid_operation_exception.h"
#include "the/memory.h"
#include "the/not_copyable.h"
#include "the/stack_trace.h"
#include "the/system/threading/no_lock.h"


/*
 * This file is generated by 'generateDelegate.pl'
 */


namespace the {


    /**
     * Implementation base for the multicast_delegate
     *
     * @param DT the 'the::delegate' type
     * @param LT the lockable type
     */
    template<class DT, class LT>
    class multicast_delegate_implbase {
    public:

        /** type of the single delegates stored within this multicast delegate */
        typedef DT single_delegate_type;

        /**
         * Adds a new entry to the list of invocation targets
         *
         * @param d The new entry to be added to the list of invocation
         *          targets
         */
        void add(const single_delegate_type& d) {
            THE_STACK_TRACE;
            this->targets.add(d);
        }

        /**
         * Removes an entry from the list of invocation targets
         *
         * @remarks 'd' must be equal to the item added before in that respect
         *              that the attributes of the single delegate must be
         *              equal, i.e. the function pointer and any object
         *              pointer or context pointer used. The single delegate
         *              object itself does not need to be the same one.
         *
         * @param d The entry to be removed from the list of invocation
         *          targets
         */
        void remove(const single_delegate_type& d) {
            THE_STACK_TRACE;
            this->targets.remove(d, true);
        }

        /**
         * Test for equality
         *
         * @param rhs The right hand side operand
         *
         * @return true if rhs and this are equal, false otherwise
         */
        bool operator==(const multicast_delegate_implbase& rhs) const {
            THE_STACK_TRACE;
            // This is not entirely correct, because both arrays could contain
            // the same elements but in different order. However, this
            // comparison should be sufficient for must cases.
            return this->targets.equals(rhs.targets);
        }

        /**
         * Adds a new entry to the list of invocation targets
         *
         * @param d The new entry to be added to the list of invocation
         *          targets
         */
        void operator+=(const single_delegate_type& d) {
            THE_STACK_TRACE;
            this->add(d);
        }

        /**
         * Removes an entry from the list of invocation targets
         *
         * @remarks 'd' must be equal to the item added before in that respect
         *              that the attributes of the single delegate must be
         *              equal, i.e. the function pointer and any object
         *              pointer or context pointer used. The single delegate
         *              object itself does not need to be the same one.
         *
         * @param d The entry to be removed from the list of invocation
         *          targets
         */
        void operator-=(const single_delegate_type& d) {
            THE_STACK_TRACE;
            this->remove(d);
        }

    protected:

        /** Ctor */
        multicast_delegate_implbase(void) : targets() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_implbase(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** The list of invocation targets */
        collections::array<single_delegate_type, LT> targets;

    };


    /**
     * Implementation of the multicast delegate call functionality
     */
    template<class DT, class LT, class P1 = void, class P2 = void, class P3 = void, class P4 = void, class P5 = void, class P6 = void, class P7 = void, class P8 = void, class P9 = void, class P10 = void>
    class multicast_delegate_impl : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8, P9 p9, P10 p10) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 9 parameters
     */
    template<class DT, class LT, class P1, class P2, class P3, class P4, class P5, class P6, class P7, class P8, class P9>
    class multicast_delegate_impl<DT, LT, P1, P2, P3, P4, P5, P6, P7, P8, P9, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8, P9 p9) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3, p4, p5, p6, p7, p8, p9);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 8 parameters
     */
    template<class DT, class LT, class P1, class P2, class P3, class P4, class P5, class P6, class P7, class P8>
    class multicast_delegate_impl<DT, LT, P1, P2, P3, P4, P5, P6, P7, P8, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3, p4, p5, p6, p7, p8);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 7 parameters
     */
    template<class DT, class LT, class P1, class P2, class P3, class P4, class P5, class P6, class P7>
    class multicast_delegate_impl<DT, LT, P1, P2, P3, P4, P5, P6, P7, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3, p4, p5, p6, p7);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 6 parameters
     */
    template<class DT, class LT, class P1, class P2, class P3, class P4, class P5, class P6>
    class multicast_delegate_impl<DT, LT, P1, P2, P3, P4, P5, P6, void, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3, p4, p5, p6);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 5 parameters
     */
    template<class DT, class LT, class P1, class P2, class P3, class P4, class P5>
    class multicast_delegate_impl<DT, LT, P1, P2, P3, P4, P5, void, void, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3, p4, p5);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 4 parameters
     */
    template<class DT, class LT, class P1, class P2, class P3, class P4>
    class multicast_delegate_impl<DT, LT, P1, P2, P3, P4, void, void, void, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3, P4 p4) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3, p4);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 3 parameters
     */
    template<class DT, class LT, class P1, class P2, class P3>
    class multicast_delegate_impl<DT, LT, P1, P2, P3, void, void, void, void, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2, P3 p3) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2, p3);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 2 parameters
     */
    template<class DT, class LT, class P1, class P2>
    class multicast_delegate_impl<DT, LT, P1, P2, void, void, void, void, void, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1, P2 p2) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1, p2);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 1 parameters
     */
    template<class DT, class LT, class P1>
    class multicast_delegate_impl<DT, LT, P1, void, void, void, void, void, void, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(P1 p1) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i](p1);
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * Template specialication for multicast_delegate_impl with 0 parameters
     */
    template<class DT, class LT>
    class multicast_delegate_impl<DT, LT, void, void, void, void, void, void, void, void, void, void> : public multicast_delegate_implbase<DT, LT> {
    public:

        /**
         * Invokes the multicast_delegate and calls all entries in the
         * invocation target list
         */
        void operator()(void) {
            THE_STACK_TRACE;

            // The called delegate is be able to remove itself from the
            // list of targets!
            collections::array<typename multicast_delegate_implbase<DT, LT>::single_delegate_type> t(this->targets); // deep copy!
            // This operation is not great, but acceptable as we can
            // assume that not that many delegates will be in this list.

            // TODO: Make Thread safe!

            for (size_t i = 0; i < t.size(); i++) {
                t[i]();
            }
        }

    protected:

        /** Ctor */
        multicast_delegate_impl(void) : multicast_delegate_implbase<DT, LT>() {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** Dtor */
        ~multicast_delegate_impl(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };


    /**
     * A multicast delegate is a delegate which holds a list of invocation
     * targets. When the delegate is called, all invocation targets are
     * called. The return value of the invocation methods must be void and is
     * therefore omitted in the template parameter list.
     *
     * The template parameters define the parameter list of the callback,
     * while void is used to (implicitly) terminate the list.
     * The parameter list may only have a maximum of 10 elements.
     */
    template<class DT, class LT = the::system::threading::no_lock>
    class multicast_delegate: public multicast_delegate_impl<DT, LT,
            typename DT::param1_type,
            typename DT::param2_type,
            typename DT::param3_type,
            typename DT::param4_type,
            typename DT::param5_type,
            typename DT::param6_type,
            typename DT::param7_type,
            typename DT::param8_type,
            typename DT::param9_type,
            typename DT::param10_type> {
    public:

        /** ctor */
        multicast_delegate(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

        /** dtor */
        ~multicast_delegate(void) {
            THE_STACK_TRACE;
            // intentionally empty
        }

    };

} /* end namespace the */

#if defined(_WIN32) && defined(_MANAGED)
#pragma managed(pop)
#endif /* defined(_WIN32) && defined(_MANAGED) */
#endif /* THE_MULTICAST_DELEGATE_H_INCLUDED */
