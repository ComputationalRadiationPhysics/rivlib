// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace The.Lib.ClassWizard.Templates
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Text;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\Source.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class Source : SourceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 3 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\Source.tt"

    this.processParameters();

            
            #line default
            #line hidden
            this.Write("/*\r\n * ");
            
            #line 2 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Copyright.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(fileName));
            
            #line default
            #line hidden
            this.Write("\r\n *\r\n * Copyright (C) ");
            
            #line 4 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Copyright.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.Year.ToString()));
            
            #line default
            #line hidden
            this.Write(" TheLib Team (http://www.thelib.org/license)\r\n * All rights reserved.\r\n *\r\n * Red" +
                    "istribution and use in source and binary forms, with or without\r\n * modification" +
                    ", are permitted provided that the following conditions are met:\r\n *\r\n * - Redist" +
                    "ributions of source code must retain the above copyright notice,\r\n *   this list" +
                    " of conditions and the following disclaimer.\r\n * - Redistributions in binary for" +
                    "m must reproduce the above copyright notice,\r\n *   this list of conditions and t" +
                    "he following disclaimer in the documentation\r\n *   and/or other materials provid" +
                    "ed with the distribution.\r\n * - Neither the name of TheLib, TheLib Team, nor the" +
                    " names of its\r\n *   contributors may be used to endorse or promote products deri" +
                    "ved from this\r\n *   software without specific prior written permission.\r\n *\r\n * " +
                    "THIS SOFTWARE IS PROVIDED BY THELIB TEAM AS IS AND ANY EXPRESS OR IMPLIED\r\n * WA" +
                    "RRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n * MERCHANTA" +
                    "BILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\r\n * EVENT SHAL" +
                    "L THELIB TEAM BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMP" +
                    "LARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\r\n * TO, PROCUREMENT O" +
                    "F SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS I" +
                    "NTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n * LIABILITY, WHETHER IN CONTR" +
                    "ACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n * NEGLIGENCE OR OTHERWISE) ARISING I" +
                    "N ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILIT" +
                    "Y OF SUCH DAMAGE.\r\n */\r\n");
            this.Write("\r\n");
            
            #line 6 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\Source.tt"

    this.WriteLine("#include \"" + string.Join(
        Path.AltDirectorySeparatorChar.ToString(), this.nameList) + ".h\"");

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 11 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\Source.tt"

    if (string.IsNullOrWhiteSpace(this.templateDecl)) {

            
            #line default
            #line hidden
            this.Write("#include \"the/not_implemented_exception.h\"\r\n#include \"the/stack_trace.h\"\r\n\r\n\r\n");
            
            #line 18 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\Source.tt"

        this.renderImplementation();

    } else {


            
            #line default
            #line hidden
            this.Write("\r\n/*\r\n * This file is intentionally empty.\r\n */\r\n");
            
            #line 28 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\Source.tt"

    } /* end if (string.IsNullOrWhiteSpace(this.templateDecl)) */

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 21 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Parameters.ttinclude"

    private void processParameters() {
        this.fileName = FileName ?? "<Parameter 'FileName' must not be empty>";
        this.fqClassName = FqClassName ?? "the::<Parameter 'FqClassName' must not be empty>";
        this.baseClassName = BaseClassName;
        this.makeDtorVirtual = MakeDtorVirtual;
        this.makeCopyable = MakeCopyable;
        this.makeNotCopyable = MakeNotCopyable;
        this.makeNotInstantiable = MakeNotInstantiable;

        // Perform some sanity checks.
        if (this.makeNotInstantiable) {
            this.makeCopyable = false;
            this.makeNotCopyable = false;    // not_instantiabale implies not_copyable.
        }
        if (this.makeNotCopyable) {
            this.makeCopyable = false;
        }

        this.baseClasses = new List<string>();
        if (!string.IsNullOrWhiteSpace(this.baseClassName)) {
            this.baseClasses.Add(this.baseClassName);
        }
        if (this.makeNotCopyable) {
            this.baseClasses.Add("the::not_copyable");
        }
        if (this.makeNotInstantiable) {
            this.baseClasses.Add("the::not_instantiable");
        }
        if (this.baseClasses.Count > 0) {
            this.makeDtorVirtual = true;
        }

        // Compute derived parameters.
        this.nameList = this.fqClassName.Split(NAMESPACE_DELIM,
            StringSplitOptions.RemoveEmptyEntries);
        this.className = this.nameList.Last();
        this.guardName = this.className.ToUpperInvariant();

        if (!string.IsNullOrWhiteSpace(this.TemplateParams)) {
            string[] parts = TemplateParams.Split(',');
            StringBuilder decl = new StringBuilder("template<");
            StringBuilder list = new StringBuilder();

            for (int i = 0; i < parts.Length; ++i) {
                string part = parts[i].Trim();
                string[] p = part.Split();

                decl.Append(part);
                list.Append(p.Last().Trim());

                if (i < parts.Length - 1) {
                    decl.Append(", ");
                    list.Append(", ");
                }
            }
            decl.Append(">");

            this.templateDecl = decl.ToString();

            this.fqClassName += "<" + list + ">";
        } else {
            this.templateDecl = null;
        }
    }

    private readonly string[] NAMESPACE_DELIM = new string[] { "::" };

    // Checked parameter values:
    private List<string> baseClasses;
    private string baseClassName;
    private string className;
    private string fileName;
    private string guardName;
    private string fqClassName;
    private bool makeCopyable;
    private bool makeDtorVirtual;
    private bool makeNotCopyable;
    private bool makeNotInstantiable;
    private string[] nameList;
    private string templateDecl;

        
        #line default
        #line hidden
        
        #line 1 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
    private void renderImplementation() {

        
        #line default
        #line hidden
        
        #line 3 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("/*\r\n * ");

        
        #line default
        #line hidden
        
        #line 5 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 5 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::");

        
        #line default
        #line hidden
        
        #line 5 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 5 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n */\r\n");

        
        #line default
        #line hidden
        
        #line 7 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
        if (!string.IsNullOrWhiteSpace(this.templateDecl)) {
            this.WriteLine(this.templateDecl);
        }

        
        #line default
        #line hidden
        
        #line 12 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 12 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::");

        
        #line default
        #line hidden
        
        #line 12 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 12 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("(void)");

        
        #line default
        #line hidden
        
        #line 12 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"

        if (baseClasses.Count == 1) {
            this.Write(" : base() ");
        } else if (baseClasses.Count > 1) {
            this.Write(" : ");
            this.Write(string.Join("(), ", baseClasses));
            this.Write("()");
        }
        
        
        #line default
        #line hidden
        
        #line 20 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(" {\r\n    THE_STACK_TRACE;\r\n    // TODO: Implement ");

        
        #line default
        #line hidden
        
        #line 22 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 22 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::");

        
        #line default
        #line hidden
        
        #line 22 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 22 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n    THROW_THE_NOT_IMPLEMENTED_EXCEPTION;\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 25 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
        if (makeCopyable) { 

        
        #line default
        #line hidden
        
        #line 27 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n\r\n/*\r\n * ");

        
        #line default
        #line hidden
        
        #line 31 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 31 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::");

        
        #line default
        #line hidden
        
        #line 31 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 31 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n */\r\n");

        
        #line default
        #line hidden
        
        #line 33 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
        if (!string.IsNullOrWhiteSpace(this.templateDecl)) {
            this.WriteLine(this.templateDecl);
        }

        
        #line default
        #line hidden
        
        #line 38 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 38 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::");

        
        #line default
        #line hidden
        
        #line 38 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 38 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("(const ");

        
        #line default
        #line hidden
        
        #line 38 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 38 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("& rhs)");

        
        #line default
        #line hidden
        
        #line 38 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"

        if (baseClasses.Count == 1) {
            this.Write(" : base(rhs) ");
        } else if (baseClasses.Count > 1) {
            this.Write(" : ");
            this.Write(string.Join("(rhs), ", baseClasses));
            this.Write("(rhs)");
        }
        
        
        #line default
        #line hidden
        
        #line 46 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(" {\r\n    THE_STACK_TRACE;\r\n    // TODO: Implement ");

        
        #line default
        #line hidden
        
        #line 48 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 48 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::");

        
        #line default
        #line hidden
        
        #line 48 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 48 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n    THROW_THE_NOT_IMPLEMENTED_EXCEPTION;\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 51 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"

     }

        
        #line default
        #line hidden
        
        #line 53 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n\r\n/*\r\n * ");

        
        #line default
        #line hidden
        
        #line 57 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 57 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::~");

        
        #line default
        #line hidden
        
        #line 57 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 57 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n */\r\n");

        
        #line default
        #line hidden
        
        #line 59 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
        if (!string.IsNullOrWhiteSpace(this.templateDecl)) {
            this.WriteLine(this.templateDecl);
        }

        
        #line default
        #line hidden
        
        #line 64 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 64 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::~");

        
        #line default
        #line hidden
        
        #line 64 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 64 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("(void) {\r\n    THE_STACK_TRACE;\r\n    // TODO: Implement ");

        
        #line default
        #line hidden
        
        #line 66 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 66 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::~");

        
        #line default
        #line hidden
        
        #line 66 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 66 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n    THROW_THE_NOT_IMPLEMENTED_EXCEPTION;\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 69 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
        if (makeCopyable) { 

        
        #line default
        #line hidden
        
        #line 71 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("\r\n\r\n/*\r\n * ");

        
        #line default
        #line hidden
        
        #line 75 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 75 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::operator =\r\n */\r\n");

        
        #line default
        #line hidden
        
        #line 77 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
        if (!string.IsNullOrWhiteSpace(this.templateDecl)) {
            this.WriteLine(this.templateDecl);
        }

        
        #line default
        #line hidden
        
        #line 82 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 82 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("& ");

        
        #line default
        #line hidden
        
        #line 82 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 82 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::operator =(const ");

        
        #line default
        #line hidden
        
        #line 82 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 82 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("& rhs) {\r\n    THE_STACK_TRACE;\r\n    if (this != &rhs) {\r\n");

        
        #line default
        #line hidden
        
        #line 85 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"

            if (baseClasses.Count == 1) {

        
        #line default
        #line hidden
        
        #line 87 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("        base::operator =(rhs);\r\n");

        
        #line default
        #line hidden
        
        #line 89 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"

            } else if (baseClasses.Count > 1) {
                foreach (string b in baseClasses) {

        
        #line default
        #line hidden
        
        #line 92 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("        ");

        
        #line default
        #line hidden
        
        #line 93 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(b));

        
        #line default
        #line hidden
        
        #line 93 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::operator =(rhs);\r\n");

        
        #line default
        #line hidden
        
        #line 94 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"

                } /* end foreach (string b in baseClasses) */
            } /* end if (baseClasses.Count == 1) */

        
        #line default
        #line hidden
        
        #line 97 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("        // TODO: Implement ");

        
        #line default
        #line hidden
        
        #line 98 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(fqClassName));

        
        #line default
        #line hidden
        
        #line 98 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
this.Write("::operator =\r\n        THROW_THE_NOT_IMPLEMENTED_EXCEPTION;\r\n    }\r\n    return *th" +
        "is;\r\n}\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 104 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"
 
        } /* end if (makeCopyable) */

        
        #line default
        #line hidden
        
        #line 109 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\.\Implementation.ttinclude"

    } /* end private void renderImplementation() */

        
        #line default
        #line hidden
        
        #line 1 "T:\Programmcode\thelib\Utility\TheClassWizard\Templates\Source.tt"

private string _FileNameField;

/// <summary>
/// Access the FileName parameter of the template.
/// </summary>
private string FileName
{
    get
    {
        return this._FileNameField;
    }
}

private string _FqClassNameField;

/// <summary>
/// Access the FqClassName parameter of the template.
/// </summary>
private string FqClassName
{
    get
    {
        return this._FqClassNameField;
    }
}

private string _BaseClassNameField;

/// <summary>
/// Access the BaseClassName parameter of the template.
/// </summary>
private string BaseClassName
{
    get
    {
        return this._BaseClassNameField;
    }
}

private string _TemplateParamsField;

/// <summary>
/// Access the TemplateParams parameter of the template.
/// </summary>
private string TemplateParams
{
    get
    {
        return this._TemplateParamsField;
    }
}

private bool _MakeDtorVirtualField;

/// <summary>
/// Access the MakeDtorVirtual parameter of the template.
/// </summary>
private bool MakeDtorVirtual
{
    get
    {
        return this._MakeDtorVirtualField;
    }
}

private bool _MakeCopyableField;

/// <summary>
/// Access the MakeCopyable parameter of the template.
/// </summary>
private bool MakeCopyable
{
    get
    {
        return this._MakeCopyableField;
    }
}

private bool _MakeNotCopyableField;

/// <summary>
/// Access the MakeNotCopyable parameter of the template.
/// </summary>
private bool MakeNotCopyable
{
    get
    {
        return this._MakeNotCopyableField;
    }
}

private bool _MakeNotInstantiableField;

/// <summary>
/// Access the MakeNotInstantiable parameter of the template.
/// </summary>
private bool MakeNotInstantiable
{
    get
    {
        return this._MakeNotInstantiableField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool FileNameValueAcquired = false;
if (this.Session.ContainsKey("FileName"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["FileName"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'FileName\' did not match the type of th" +
                "e data passed to the template.");
    }
    else
    {
        this._FileNameField = ((string)(this.Session["FileName"]));
        FileNameValueAcquired = true;
    }
}
if ((FileNameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "FileName");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._FileNameField = ((string)(tc.ConvertFrom(parameterValue)));
            FileNameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'FileName\' did not match the type of th" +
                    "e data passed to the template.");
        }
    }
}
if ((FileNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("FileName");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'FileName\' did not match the type of th" +
                    "e data passed to the template.");
        }
        else
        {
            this._FileNameField = ((string)(data));
        }
    }
}
bool FqClassNameValueAcquired = false;
if (this.Session.ContainsKey("FqClassName"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["FqClassName"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'FqClassName\' did not match the type of" +
                " the data passed to the template.");
    }
    else
    {
        this._FqClassNameField = ((string)(this.Session["FqClassName"]));
        FqClassNameValueAcquired = true;
    }
}
if ((FqClassNameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "FqClassName");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._FqClassNameField = ((string)(tc.ConvertFrom(parameterValue)));
            FqClassNameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'FqClassName\' did not match the type of" +
                    " the data passed to the template.");
        }
    }
}
if ((FqClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("FqClassName");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'FqClassName\' did not match the type of" +
                    " the data passed to the template.");
        }
        else
        {
            this._FqClassNameField = ((string)(data));
        }
    }
}
bool BaseClassNameValueAcquired = false;
if (this.Session.ContainsKey("BaseClassName"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["BaseClassName"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'BaseClassName\' did not match the type " +
                "of the data passed to the template.");
    }
    else
    {
        this._BaseClassNameField = ((string)(this.Session["BaseClassName"]));
        BaseClassNameValueAcquired = true;
    }
}
if ((BaseClassNameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "BaseClassName");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._BaseClassNameField = ((string)(tc.ConvertFrom(parameterValue)));
            BaseClassNameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'BaseClassName\' did not match the type " +
                    "of the data passed to the template.");
        }
    }
}
if ((BaseClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("BaseClassName");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'BaseClassName\' did not match the type " +
                    "of the data passed to the template.");
        }
        else
        {
            this._BaseClassNameField = ((string)(data));
        }
    }
}
bool TemplateParamsValueAcquired = false;
if (this.Session.ContainsKey("TemplateParams"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["TemplateParams"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'TemplateParams\' did not match the type" +
                " of the data passed to the template.");
    }
    else
    {
        this._TemplateParamsField = ((string)(this.Session["TemplateParams"]));
        TemplateParamsValueAcquired = true;
    }
}
if ((TemplateParamsValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "TemplateParams");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._TemplateParamsField = ((string)(tc.ConvertFrom(parameterValue)));
            TemplateParamsValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'TemplateParams\' did not match the type" +
                    " of the data passed to the template.");
        }
    }
}
if ((TemplateParamsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TemplateParams");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'TemplateParams\' did not match the type" +
                    " of the data passed to the template.");
        }
        else
        {
            this._TemplateParamsField = ((string)(data));
        }
    }
}
bool MakeDtorVirtualValueAcquired = false;
if (this.Session.ContainsKey("MakeDtorVirtual"))
{
    if ((typeof(bool).IsAssignableFrom(this.Session["MakeDtorVirtual"].GetType()) == false))
    {
        this.Error("The type \'System.Boolean\' of the parameter \'MakeDtorVirtual\' did not match the ty" +
                "pe of the data passed to the template.");
    }
    else
    {
        this._MakeDtorVirtualField = ((bool)(this.Session["MakeDtorVirtual"]));
        MakeDtorVirtualValueAcquired = true;
    }
}
if ((MakeDtorVirtualValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "MakeDtorVirtual");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(bool));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._MakeDtorVirtualField = ((bool)(tc.ConvertFrom(parameterValue)));
            MakeDtorVirtualValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeDtorVirtual\' did not match the ty" +
                    "pe of the data passed to the template.");
        }
    }
}
if ((MakeDtorVirtualValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("MakeDtorVirtual");
    if ((data != null))
    {
        if ((typeof(bool).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeDtorVirtual\' did not match the ty" +
                    "pe of the data passed to the template.");
        }
        else
        {
            this._MakeDtorVirtualField = ((bool)(data));
        }
    }
}
bool MakeCopyableValueAcquired = false;
if (this.Session.ContainsKey("MakeCopyable"))
{
    if ((typeof(bool).IsAssignableFrom(this.Session["MakeCopyable"].GetType()) == false))
    {
        this.Error("The type \'System.Boolean\' of the parameter \'MakeCopyable\' did not match the type " +
                "of the data passed to the template.");
    }
    else
    {
        this._MakeCopyableField = ((bool)(this.Session["MakeCopyable"]));
        MakeCopyableValueAcquired = true;
    }
}
if ((MakeCopyableValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "MakeCopyable");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(bool));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._MakeCopyableField = ((bool)(tc.ConvertFrom(parameterValue)));
            MakeCopyableValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeCopyable\' did not match the type " +
                    "of the data passed to the template.");
        }
    }
}
if ((MakeCopyableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("MakeCopyable");
    if ((data != null))
    {
        if ((typeof(bool).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeCopyable\' did not match the type " +
                    "of the data passed to the template.");
        }
        else
        {
            this._MakeCopyableField = ((bool)(data));
        }
    }
}
bool MakeNotCopyableValueAcquired = false;
if (this.Session.ContainsKey("MakeNotCopyable"))
{
    if ((typeof(bool).IsAssignableFrom(this.Session["MakeNotCopyable"].GetType()) == false))
    {
        this.Error("The type \'System.Boolean\' of the parameter \'MakeNotCopyable\' did not match the ty" +
                "pe of the data passed to the template.");
    }
    else
    {
        this._MakeNotCopyableField = ((bool)(this.Session["MakeNotCopyable"]));
        MakeNotCopyableValueAcquired = true;
    }
}
if ((MakeNotCopyableValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "MakeNotCopyable");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(bool));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._MakeNotCopyableField = ((bool)(tc.ConvertFrom(parameterValue)));
            MakeNotCopyableValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeNotCopyable\' did not match the ty" +
                    "pe of the data passed to the template.");
        }
    }
}
if ((MakeNotCopyableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("MakeNotCopyable");
    if ((data != null))
    {
        if ((typeof(bool).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeNotCopyable\' did not match the ty" +
                    "pe of the data passed to the template.");
        }
        else
        {
            this._MakeNotCopyableField = ((bool)(data));
        }
    }
}
bool MakeNotInstantiableValueAcquired = false;
if (this.Session.ContainsKey("MakeNotInstantiable"))
{
    if ((typeof(bool).IsAssignableFrom(this.Session["MakeNotInstantiable"].GetType()) == false))
    {
        this.Error("The type \'System.Boolean\' of the parameter \'MakeNotInstantiable\' did not match th" +
                "e type of the data passed to the template.");
    }
    else
    {
        this._MakeNotInstantiableField = ((bool)(this.Session["MakeNotInstantiable"]));
        MakeNotInstantiableValueAcquired = true;
    }
}
if ((MakeNotInstantiableValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "MakeNotInstantiable");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(bool));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._MakeNotInstantiableField = ((bool)(tc.ConvertFrom(parameterValue)));
            MakeNotInstantiableValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeNotInstantiable\' did not match th" +
                    "e type of the data passed to the template.");
        }
    }
}
if ((MakeNotInstantiableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("MakeNotInstantiable");
    if ((data != null))
    {
        if ((typeof(bool).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Boolean\' of the parameter \'MakeNotInstantiable\' did not match th" +
                    "e type of the data passed to the template.");
        }
        else
        {
            this._MakeNotInstantiableField = ((bool)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class SourceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
