<#@ parameter type="System.String" name="FileName" #>
<#@ parameter type="System.String" name="FqClassName" #>
<#@ parameter type="System.String" name="BaseClassName" #>
<#@ parameter type="System.String" name="TemplateParams" #>
<#@ parameter type="System.Boolean" name="MakeDtorVirtual" #>
<#@ parameter type="System.Boolean" name="MakeCopyable" #>
<#@ parameter type="System.Boolean" name="MakeNotCopyable" #>
<#@ parameter type="System.Boolean" name="MakeNotInstantiable" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
    private void processParameters() {
        this.fileName = FileName ?? "<Parameter 'FileName' must not be empty>";
        this.fqClassName = FqClassName ?? "the::<Parameter 'FqClassName' must not be empty>";
        this.baseClassName = BaseClassName;
        this.makeDtorVirtual = MakeDtorVirtual;
        this.makeCopyable = MakeCopyable;
        this.makeNotCopyable = MakeNotCopyable;
        this.makeNotInstantiable = MakeNotInstantiable;

        // Perform some sanity checks.
        if (this.makeNotInstantiable) {
            this.makeCopyable = false;
            this.makeNotCopyable = false;    // not_instantiabale implies not_copyable.
        }
        if (this.makeNotCopyable) {
            this.makeCopyable = false;
        }

        this.baseClasses = new List<string>();
        if (!string.IsNullOrWhiteSpace(this.baseClassName)) {
            this.baseClasses.Add(this.baseClassName);
        }
        if (this.makeNotCopyable) {
            this.baseClasses.Add("the::not_copyable");
        }
        if (this.makeNotInstantiable) {
            this.baseClasses.Add("the::not_instantiable");
        }
        if (this.baseClasses.Count > 0) {
            this.makeDtorVirtual = true;
        }

        // Compute derived parameters.
        this.nameList = this.fqClassName.Split(NAMESPACE_DELIM,
            StringSplitOptions.RemoveEmptyEntries);
        this.className = this.nameList.Last();
        this.guardName = string.Join("_", this.nameList).ToUpperInvariant();

        if (!string.IsNullOrWhiteSpace(this.TemplateParams)) {
            string[] parts = TemplateParams.Split(',');
            StringBuilder decl = new StringBuilder("template<");
            StringBuilder list = new StringBuilder();

            for (int i = 0; i < parts.Length; ++i) {
                string part = parts[i].Trim();
                string[] p = part.Split();

                decl.Append(part);
                list.Append(p.Last().Trim());

                if (i < parts.Length - 1) {
                    decl.Append(", ");
                    list.Append(", ");
                }
            }
            decl.Append(">");

            this.templateDecl = decl.ToString();

            this.fqClassName += "<" + list + ">";
        } else {
            this.templateDecl = null;
        }
    }

    private readonly string[] NAMESPACE_DELIM = new string[] { "::" };

    // Checked parameter values:
    private List<string> baseClasses;
    private string baseClassName;
    private string className;
    private string fileName;
    private string guardName;
    private string fqClassName;
    private bool makeCopyable;
    private bool makeDtorVirtual;
    private bool makeNotCopyable;
    private bool makeNotInstantiable;
    private string[] nameList;
    private string templateDecl;
#>